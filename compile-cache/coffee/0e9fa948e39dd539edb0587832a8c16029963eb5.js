(function() {
  var InputOutputManager, command, path;

  InputOutputManager = require('../lib/pipeline/io-manager');

  path = require('path');

  command = {
    name: '',
    command: '',
    wd: '.',
    stdout: {
      highlighting: 'ha'
    },
    stderr: {
      highlighting: 'hc',
      profile: 'modelsim'
    },
    version: 1
  };

  describe('Output Manager', function() {
    var input, input_cb, manager, output, write_cb;
    manager = null;
    output = null;
    write_cb = null;
    input = null;
    input_cb = null;
    beforeEach(function() {
      output = {
        newCommand: jasmine.createSpy('newCommand'),
        exitCommand: jasmine.createSpy('exitCommand'),
        setInput: jasmine.createSpy('input').andCallFake(function(_input) {
          return input_cb = _input.write;
        }),
        onInput: jasmine.createSpy('oninput'),
        stdout_in: jasmine.createSpy('stdout_in'),
        stdout_setType: jasmine.createSpy('stdout_setType'),
        stderr_in: jasmine.createSpy('stderr_in'),
        stderr_setType: jasmine.createSpy('stderr_setType'),
        stderr_print: jasmine.createSpy('stderr_setType'),
        stderr_linter: jasmine.createSpy('stderr_linter')
      };
      input = {
        write: jasmine.createSpy('write').andCallFake(write_cb = (function(a, b, cb) {
          return cb();
        })),
        end: jasmine.createSpy('end')
      };
      command.project = atom.project.getPaths()[0];
      manager = new InputOutputManager(command, [output]);
      return manager.setInput(input);
    });
    afterEach(function() {
      return manager.destroy();
    });
    it('initalizes the output module', function() {
      return expect(output.newCommand).toHaveBeenCalledWith(command);
    });
    it('initalizes the input callbacks', function() {
      return expect(output.setInput).toHaveBeenCalled();
    });
    describe('On stdin output', function() {
      beforeEach(function() {
        return input_cb('Test');
      });
      it('calls the input stream\'s write function', function() {
        expect(input.write).toHaveBeenCalled();
        return expect(input.write.mostRecentCall.args[0]).toBe('Test');
      });
      return it('calls the input callback', function() {
        return expect(output.onInput).toHaveBeenCalledWith('Test');
      });
    });
    describe('On stdout input', function() {
      var end_line, mid_line, new_line;
      new_line = null;
      mid_line = null;
      end_line = null;
      beforeEach(function() {
        new_line = jasmine.createSpy('new_line');
        mid_line = jasmine.createSpy('mid_line');
        end_line = jasmine.createSpy('end_line');
        manager.stdout.subscribers.on('new', new_line);
        manager.stdout.subscribers.on('raw', mid_line);
        return manager.stdout.subscribers.on('input', end_line);
      });
      describe('On single line', function() {
        beforeEach(function() {
          return manager.stdout["in"]('This is a single line\n');
        });
        it('calls "new"', function() {
          return expect(new_line.callCount).toBe(1);
        });
        it('calls "raw"', function() {
          return expect(mid_line).toHaveBeenCalledWith('This is a single line');
        });
        return it('calls "input"', function() {
          expect(end_line).toHaveBeenCalled();
          return expect(end_line.mostRecentCall.args[0].input).toBe('This is a single line');
        });
      });
      describe('On multiple lines (2 full, last broken)', function() {
        beforeEach(function() {
          return manager.stdout["in"]('First line\nSecond line\nThird');
        });
        it('calls "new" 3 times', function() {
          return expect(new_line.callCount).toBe(3);
        });
        it('calls "raw" 3 times', function() {
          expect(mid_line.callCount).toBe(3);
          return expect(mid_line.argsForCall).toEqual([['First line'], ['Second line'], ['Third']]);
        });
        it('calls "input" 2 times', function() {
          expect(end_line.callCount).toBe(2);
          expect(end_line.argsForCall[0][0].input).toBe('First line');
          return expect(end_line.argsForCall[1][0].input).toBe('Second line');
        });
        it('resets buffer', function() {
          return expect(manager.stdout.buffer).toBe('Third');
        });
        return describe('On adding to the third line', function() {
          beforeEach(function() {
            return manager.stdout["in"](' line');
          });
          it('does not call "new"', function() {
            return expect(new_line.callCount).toBe(3);
          });
          it('calls "raw"', function() {
            return expect(mid_line.mostRecentCall.args[0]).toBe(' line');
          });
          it('updates buffer', function() {
            return expect(manager.stdout.buffer).toBe('Third line');
          });
          return describe('On finishing the third line', function() {
            beforeEach(function() {
              return manager.stdout["in"]('\n');
            });
            it('calls "new"', function() {
              return expect(new_line.callCount).toBe(3);
            });
            return it('calls "input"', function() {
              expect(end_line.callCount).toBe(3);
              return expect(end_line.mostRecentCall.args[0].input).toBe('Third line');
            });
          });
        });
      });
      return describe('When encountering ANSI-Sequences', function() {
        describe('in one input string', function() {
          beforeEach(function() {
            return manager.stdout["in"]('Hello\x1b[36mWorld\n');
          });
          it('calls "new"', function() {
            return expect(new_line.callCount).toBe(1);
          });
          it('calls "raw" without the escape sequence', function() {
            return expect(mid_line.mostRecentCall.args[0]).toBe('HelloWorld');
          });
          return it('calls "input"', function() {
            return expect(end_line.mostRecentCall.args[0].input).toBe('HelloWorld');
          });
        });
        return describe('in split input', function() {
          beforeEach(function() {
            return manager.stdout["in"]('Hello\x1b[');
          });
          it('calls "new"', function() {
            return expect(new_line).toHaveBeenCalled();
          });
          it('calls "raw"', function() {
            return expect(mid_line.mostRecentCall.args[0]).toBe('Hello');
          });
          return describe('second part', function() {
            beforeEach(function() {
              return manager.stdout["in"]('36');
            });
            it('does not call "new"', function() {
              return expect(new_line.callCount).toBe(1);
            });
            it('does not call "raw"', function() {
              return expect(mid_line.callCount).toBe(1);
            });
            return describe('third part', function() {
              beforeEach(function() {
                return manager.stdout["in"]('mWorld\n');
              });
              it('does not call "new"', function() {
                return expect(new_line.callCount).toBe(1);
              });
              it('calls "raw"', function() {
                return expect(mid_line.mostRecentCall.args[0]).toBe('World');
              });
              return it('calls "input"', function() {
                return expect(end_line.mostRecentCall.args[0].input).toBe('HelloWorld');
              });
            });
          });
        });
      });
    });
    describe('On stderr input', function() {
      var end_line, mid_line, new_line;
      new_line = null;
      mid_line = null;
      end_line = null;
      beforeEach(function() {
        new_line = jasmine.createSpy('new_line');
        mid_line = jasmine.createSpy('mid_line');
        end_line = jasmine.createSpy('end_line');
        manager.stderr.subscribers.on('new', new_line);
        manager.stderr.subscribers.on('raw', mid_line);
        return manager.stderr.subscribers.on('input', end_line);
      });
      describe('On single line', function() {
        beforeEach(function() {
          return manager.stderr["in"]('This is a single line\n');
        });
        it('calls "new"', function() {
          return expect(new_line).toHaveBeenCalled();
        });
        it('calls "raw"', function() {
          return expect(mid_line).toHaveBeenCalledWith('This is a single line');
        });
        return it('calls "input"', function() {
          expect(end_line).toHaveBeenCalled();
          return expect(end_line.mostRecentCall.args[0].input).toBe('This is a single line');
        });
      });
      return describe('On multiple lines (2 full, last broken)', function() {
        beforeEach(function() {
          return manager.stderr["in"]('First line\nSecond line\nThird');
        });
        it('calls "new" 3 times', function() {
          return expect(new_line.callCount).toBe(3);
        });
        it('calls "raw" 3 times', function() {
          expect(mid_line.callCount).toBe(3);
          return expect(mid_line.argsForCall).toEqual([['First line'], ['Second line'], ['Third']]);
        });
        it('calls "input" 2 times', function() {
          expect(end_line.callCount).toBe(2);
          expect(end_line.argsForCall[0][0].input).toBe('First line');
          return expect(end_line.argsForCall[1][0].input).toBe('Second line');
        });
        it('resets buffer', function() {
          return expect(manager.stderr.buffer).toBe('Third');
        });
        return describe('On adding to the third line', function() {
          beforeEach(function() {
            return manager.stderr["in"](' line');
          });
          it('calls "raw"', function() {
            return expect(mid_line.mostRecentCall.args[0]).toBe(' line');
          });
          it('updates buffer', function() {
            return expect(manager.stderr.buffer).toBe('Third line');
          });
          return describe('On finishing the third line', function() {
            beforeEach(function() {
              return manager.stderr["in"]('\n');
            });
            it('calls "new"', function() {
              return expect(new_line.callCount).toBe(3);
            });
            return it('calls "input"', function() {
              expect(end_line.callCount).toBe(3);
              return expect(end_line.mostRecentCall.args[0].input).toBe('Third line');
            });
          });
        });
      });
    });
    describe('On stdout input', function() {
      return it('calls the correct functions', function() {
        manager.stdout["in"]('Hello World\n');
        expect(output.stdout_in).toHaveBeenCalledWith({
          input: 'Hello World',
          files: []
        });
        return expect(output.stdout_setType).toHaveBeenCalledWith('warning');
      });
    });
    describe('On stderr input', function() {
      return it('calls the correct functions', function() {
        var match, test;
        input = '** Error: test.vhd(278): VHDL Compiler exiting';
        manager.stderr["in"]("" + input + "\n");
        expect(output.stderr_in.mostRecentCall.args[0].input).toBe(input);
        match = {
          type: 'error',
          message: 'VHDL Compiler exiting',
          file: path.join(atom.project.getPaths()[0], 'test.vhd'),
          row: '278',
          input: input
        };
        test = output.stderr_print.mostRecentCall.args[0].input;
        expect(test.input).toBe(match.input);
        expect(test.type).toBe(match.type);
        test = output.stderr_linter.mostRecentCall.args[0];
        expect(test.text).toBe(match.message);
        expect(test.type).toBe(match.type);
        expect(test.filePath).toBe(match.file);
        return expect(test.range).toEqual([[277, 0], [277, 9999]]);
      });
    });
    return describe('When command has finished', function() {
      beforeEach(function() {
        return manager.finish(0);
      });
      return it('sends the exit code to the module', function() {
        return expect(output.exitCommand).toHaveBeenCalledWith(0);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/champ/.atom/packages/build-tools/spec/io-manager-spec.coffee
