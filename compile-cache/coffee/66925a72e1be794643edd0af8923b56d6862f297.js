
/*
  Atom-terminal-panel
  Copyright by isis97
  MIT licensed

  The very basic class, which handles the configuration files, loads up commands and
  answers all the commands requests generated by terminal instance.
 */

(function() {
  var ATPCore, dirname, extname, fs, resolve, _ref;

  _ref = include('path'), resolve = _ref.resolve, dirname = _ref.dirname, extname = _ref.extname;

  fs = include('fs');

  ATPCore = (function() {
    function ATPCore() {}

    ATPCore.prototype.state = {
      config: {},
      statePath: null,
      opened: false,
      customCommands: {},
      defaultCommands: {
        "hello_world": {
          "description": "Prints the hello world message to the terminal output.",
          "command": ["echo Hello world :D", "echo This is", "echo example usage", "echo of the console"]
        }
      }
    };

    ATPCore.prototype.createDefaultCommandsFile = function() {
      var content, e, initialContent;
      if (atom.config.get('atom-terminal-panel.enableUserCommands')) {
        try {
          initialContent = {
            '_comment': 'Package atom-terminal-panel: This terminal-commands.json file was automatically generated by atom-terminal-package. It contains all useful config data.',
            commands: this.state.defaultCommands,
            actions: [],
            toolbar: [["clear", "clear", "Clears the console output."], ["info", "info", "Prints the terminal welcome message."], ["all available commands", "memdump", "Displays all available builtin commands. (all commands except native)"]],
            rules: {
              "\\b[A-Z][A-Z]+\\b": {
                'match': {
                  'flags': ['g']
                },
                'css': {
                  'color': 'gray'
                }
              },
              '(error|err):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:error:text:Error) %(0)'
                },
                'css': {
                  'color': 'red',
                  'font-weight': 'bold'
                }
              },
              '(warning|warn|alert):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:warning:text:Warning) %(0)'
                },
                'css': {
                  'color': 'yellow'
                }
              },
              '(note|info):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:info:text:Info) %(0)'
                },
                'css': {}
              },
              '(debug|dbg):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:default:text:Debug) %(0)'
                },
                'css': {
                  'color': 'gray'
                }
              }
            }
          };
          content = JSON.stringify(initialContent, null, '\t');
          return fs.writeFileSync(this.state.statePath, content);
        } catch (_error) {
          e = _error;
          return console.log('atp-core cannot create default terminal commands JSON file', e.message);
        }
      }
    };

    ATPCore.prototype.reload = function() {
      this.state.opended = false;
      return this.init();
    };

    ATPCore.prototype.init = function() {
      var e;
      if (!this.state.opended) {
        this.state.opened = true;
        this.state.statePath = dirname(atom.config.getUserConfigPath()) + '/terminal-commands.json';
        try {
          this.state.config = JSON.parse(fs.readFileSync(this.state.statePath));
        } catch (_error) {
          e = _error;
          console.log('atp-core cannot reload terminal config file: invalid content', e.message);
          atom.notifications.addWarning("atom-terminal-panel: Could not load the config file. The new file will be created. Reason: " + e.message);
          this.state.opened = false;
        }
        if (!this.state.opened) {
          this.createDefaultCommandsFile();
          this.state.opened = true;
          this.state.customCommands = this.state.defaultCommands;
        } else {
          this.state.customCommands = this.state.config.commands;
        }
      }
      return this;
    };

    ATPCore.prototype.jsonCssToInlineStyle = function(obj) {
      var key, ret, value;
      if (obj instanceof String) {
        return obj;
      }
      ret = '';
      for (key in obj) {
        value = obj[key];
        if ((key != null) && (value != null)) {
          ret += key + ':' + value + ';';
        }
      }
      return ret;
    };

    ATPCore.prototype.getConfig = function() {
      return this.state.config;
    };

    ATPCore.prototype.getUserCommands = function() {
      if (atom.config.get('atom-terminal-panel.enableUserCommands')) {
        return this.state.customCommands;
      }
      return null;
    };

    ATPCore.prototype.findUserCommandAction = function(cmd) {
      var code, name, _ref1;
      if (!atom.config.get('atom-terminal-panel.enableUserCommands')) {
        return null;
      }
      _ref1 = this.state.customCommands;
      for (name in _ref1) {
        code = _ref1[name];
        if (name === cmd) {
          if (code.command != null) {
            return code.command;
          }
          return code;
        }
      }
      return null;
    };

    ATPCore.prototype.findUserCommand = function(cmd) {
      var action;
      if (!atom.config.get('atom-terminal-panel.enableUserCommands')) {
        return null;
      }
      action = this.findUserCommandAction(cmd);
      if (action == null) {
        return null;
      }
      return function(state, args) {
        return state.execDelayedCommand(1, action, args, state);
      };
    };

    return ATPCore;

  })();

  module.exports = new ATPCore().init();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvY2hhbXAvLmF0b20vcGFja2FnZXMvYXRvbS10ZXJtaW5hbC1wYW5lbC9saWIvYXRwLWNvcmUuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQTs7Ozs7OztHQUFBO0FBQUE7QUFBQTtBQUFBLE1BQUEsNENBQUE7O0FBQUEsRUFTQSxPQUE4QixPQUFBLENBQVEsTUFBUixDQUE5QixFQUFDLGVBQUEsT0FBRCxFQUFVLGVBQUEsT0FBVixFQUFtQixlQUFBLE9BVG5CLENBQUE7O0FBQUEsRUFVQSxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FWTCxDQUFBOztBQUFBLEVBWU07eUJBRUo7O0FBQUEsc0JBQUEsS0FBQSxHQUNFO0FBQUEsTUFBQSxNQUFBLEVBQVEsRUFBUjtBQUFBLE1BQ0EsU0FBQSxFQUFXLElBRFg7QUFBQSxNQUVBLE1BQUEsRUFBUSxLQUZSO0FBQUEsTUFHQSxjQUFBLEVBQWdCLEVBSGhCO0FBQUEsTUFJQSxlQUFBLEVBQ0U7QUFBQSxRQUFBLGFBQUEsRUFBZTtBQUFBLFVBQ2IsYUFBQSxFQUFlLHdEQURGO0FBQUEsVUFFYixTQUFBLEVBQVcsQ0FDVCxxQkFEUyxFQUVULGNBRlMsRUFHVCxvQkFIUyxFQUlULHFCQUpTLENBRkU7U0FBZjtPQUxGO0tBREYsQ0FBQTs7QUFBQSxzQkFnQkEseUJBQUEsR0FBMkIsU0FBQSxHQUFBO0FBQ3pCLFVBQUEsMEJBQUE7QUFBQSxNQUFBLElBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFaLENBQWdCLHdDQUFoQixDQUFIO0FBQ0U7QUFDRSxVQUFBLGNBQUEsR0FBaUI7QUFBQSxZQUNmLFVBQUEsRUFBWSx5SkFERztBQUFBLFlBRWYsUUFBQSxFQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsZUFGRjtBQUFBLFlBR2YsT0FBQSxFQUFTLEVBSE07QUFBQSxZQUlmLE9BQUEs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

//# sourceURL=/home/champ/.atom/packages/atom-terminal-panel/lib/atp-core.coffee
