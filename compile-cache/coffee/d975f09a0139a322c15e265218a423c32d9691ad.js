(function() {
  var Command, CommandEditPane;

  CommandEditPane = require('../lib/view/command-edit-pane');

  Command = require('../lib/provider/command');

  describe('Command Edit Pane', function() {
    var accept, cancel, command, view;
    view = null;
    accept = null;
    cancel = null;
    command = null;
    beforeEach(function() {
      accept = jasmine.createSpy('accept');
      cancel = jasmine.createSpy('cancel');
      command = {
        project: atom.project.getPaths()[0],
        oldname: 'Test 1',
        name: 'Test 1',
        command: 'echo test',
        wd: '.',
        modifier: {
          save_all: {}
        },
        stdout: {
          highlighting: 'nh'
        },
        stderr: {
          highlighting: 'hc',
          profile: 'python'
        },
        output: {
          console: {
            close_success: true
          }
        }
      };
      view = new CommandEditPane(command);
      view.setCallbacks(accept, cancel);
      return jasmine.attachToDOM(view.element);
    });
    it('has a pane', function() {
      return expect(view.element).toBeDefined();
    });
    it('has 5 edit panes', function() {
      return expect(view.find('.inset-panel').length).toBe(11);
    });
    it('has the correct values', function() {
      expect(view.panes[0].view.command_name.getModel().getText()).toBe('Test 1');
      expect(view.panes[1].pane.find('#save_all').prop('checked')).toBe(true);
      expect(view.panes[6].view.stderr_profile[0].selectedIndex).toBe(3);
      return expect(view.panes[7].view.find('#close_success').prop('checked')).toBe(true);
    });
    describe('On accept', function() {
      beforeEach(function() {
        view.panes[1].pane.find('#save_all').prop('checked', false);
        return view.find('.btn-primary').click();
      });
      it('returns the correct values', function() {
        var oldname, res;
        res = accept.mostRecentCall.args[0];
        oldname = accept.mostRecentCall.args[1];
        expect(accept).toHaveBeenCalled();
        expect(oldname).toBe('Test 1');
        expect(res.project).toBe(atom.project.getPaths()[0]);
        expect(res.command).toBe('echo test');
        expect(res.modifier.save_all).toBeUndefined();
        expect(res.stdout.highlighting).toBe('nh');
        expect(res.stderr.highlighting).toBe('hc');
        expect(res.stderr.profile).toBe('python');
        expect(res.output.console.close_success).toBe(true);
        return expect(res.output.linter).toBeUndefined();
      });
      return it('calls the cancel callback', function() {
        return expect(cancel).toHaveBeenCalled();
      });
    });
    describe('Pane can be created with atom.views.getView', function() {
      var c, execute, p, _ref;
      _ref = [], c = _ref[0], p = _ref[1];
      execute = function(callback) {
        waitsForPromise(function() {
          return atom.packages.activatePackage('build-tools');
        });
        return runs(function() {
          return callback();
        });
      };
      it('On getView with default command', function() {
        return execute(function() {
          c = new Command;
          p = atom.views.getView(c);
          jasmine.attachToDOM(p.element);
          expect(p.panes[0].view.command_name.getModel().getText()).toBe('');
          return expect(p.command.oldname).toBeUndefined();
        });
      });
      return it('on getView with a valid command', function() {
        return execute(function() {
          command.oldname = void 0;
          c = new Command(command);
          p = atom.views.getView(c);
          jasmine.attachToDOM(p.element);
          expect(p.panes[0].view.command_name.getModel().getText()).toBe('Test 1');
          return expect(p.command.oldname).toBe('Test 1');
        });
      });
    });
    return describe('use blacklist to hide modules', function() {
      beforeEach(function() {
        view.remove();
        view = new CommandEditPane(command);
        view.setCallbacks(accept, cancel);
        view.setBlacklist(['general', 'console']);
        return jasmine.attachToDOM(view.element);
      });
      return it('shows all views minus the blacklisted ones', function() {
        expect(view.find('.inset-panel').length).toBe(9);
        return expect(view.panes[0].view.command_name).toBeUndefined();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvY2hhbXAvLmF0b20vcGFja2FnZXMvYnVpbGQtdG9vbHMvc3BlYy9jb21tYW5kLWVkaXQtcGFuZS1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSx3QkFBQTs7QUFBQSxFQUFBLGVBQUEsR0FBa0IsT0FBQSxDQUFRLCtCQUFSLENBQWxCLENBQUE7O0FBQUEsRUFDQSxPQUFBLEdBQVUsT0FBQSxDQUFRLHlCQUFSLENBRFYsQ0FBQTs7QUFBQSxFQUdBLFFBQUEsQ0FBUyxtQkFBVCxFQUE4QixTQUFBLEdBQUE7QUFDNUIsUUFBQSw2QkFBQTtBQUFBLElBQUEsSUFBQSxHQUFPLElBQVAsQ0FBQTtBQUFBLElBQ0EsTUFBQSxHQUFTLElBRFQsQ0FBQTtBQUFBLElBRUEsTUFBQSxHQUFTLElBRlQsQ0FBQTtBQUFBLElBR0EsT0FBQSxHQUFVLElBSFYsQ0FBQTtBQUFBLElBS0EsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULE1BQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxTQUFSLENBQWtCLFFBQWxCLENBQVQsQ0FBQTtBQUFBLE1BQ0EsTUFBQSxHQUFTLE9BQU8sQ0FBQyxTQUFSLENBQWtCLFFBQWxCLENBRFQsQ0FBQTtBQUFBLE1BRUEsT0FBQSxHQUNFO0FBQUEsUUFBQSxPQUFBLEVBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFiLENBQUEsQ0FBd0IsQ0FBQSxDQUFBLENBQWpDO0FBQUEsUUFDQSxPQUFBLEVBQVMsUUFEVDtBQUFBLFFBRUEsSUFBQSxFQUFNLFFBRk47QUFBQSxRQUdBLE9BQUEsRUFBUyxXQUhUO0FBQUEsUUFJQSxFQUFBLEVBQUksR0FKSjtBQUFBLFFBS0EsUUFBQSxFQUNFO0FBQUEsVUFBQSxRQUFBLEVBQVUsRUFBVjtTQU5GO0FBQUEsUUFPQSxNQUFBLEVBQ0U7QUFBQSxVQUFBLFlBQUEs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

//# sourceURL=/home/champ/.atom/packages/build-tools/spec/command-edit-pane-spec.coffee
