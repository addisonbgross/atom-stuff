(function() {
  var Tab;

  Tab = require('../lib/console/tab');

  describe('Console - Tab', function() {
    var command, tab, _ref;
    _ref = [], command = _ref[0], tab = _ref[1];
    beforeEach(function() {
      command = {
        project: atom.project.getPaths()[0],
        name: 'Test Command',
        command: 'test',
        wd: '.',
        output: {
          console: {
            close_success: true
          }
        }
      };
      atom.config.set('build-tools.CloseOnSuccess', 0);
      return tab = new Tab(command);
    });
    afterEach(function() {
      return tab.destroy();
    });
    describe('On ::clear', function() {
      beforeEach(function() {
        spyOn(tab.view, 'clear').andCallThrough();
        return tab.clear();
      });
      it('clears the return variables', function() {
        expect(tab.error).toBeNull();
        return expect(tab.code).toBeNull();
      });
      return it('calls view::clear', function() {
        return expect(tab.view.clear).toHaveBeenCalled();
      });
    });
    describe('On ::setRunning', function() {
      return it('sets the tab header to "running"', function() {
        tab.setRunning();
        return expect(tab.header.icon[0].className).toBe('icon icon-sync');
      });
    });
    describe('On ::setError', function() {
      beforeEach(function() {
        return tab.setError('Error');
      });
      it('sets the tab header to "error"', function() {
        return expect(tab.header.icon[0].classList.contains('icon-x')).toBe(true);
      });
      return it('sets the error variable', function() {
        expect(tab.error).toBe('Error');
        return expect(tab.code).toBe(-1);
      });
    });
    describe('On ::setFinished', function() {
      var spy;
      spy = null;
      beforeEach(function() {
        spy = jasmine.createSpy('close');
        tab.emitter.on('close', spy);
        return tab.setFinished(0);
      });
      it('sets the tab header to "error"', function() {
        return expect(tab.header.icon[0].classList.contains('icon-check')).toBe(true);
      });
      return it('sets the error variable', function() {
        return expect(tab.code).toBe(0);
      });
    });
    return describe('On ::setCancelled', function() {
      beforeEach(function() {
        return tab.setCancelled();
      });
      it('sets the tab header to "error"', function() {
        return expect(tab.header.icon[0].classList.contains('icon-x')).toBe(true);
      });
      return it('sets the error variable', function() {
        return expect(tab.code).toBe(-2);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvY2hhbXAvLmF0b20vcGFja2FnZXMvYnVpbGQtdG9vbHMvc3BlYy90YWItc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsR0FBQTs7QUFBQSxFQUFBLEdBQUEsR0FBTSxPQUFBLENBQVEsb0JBQVIsQ0FBTixDQUFBOztBQUFBLEVBRUEsUUFBQSxDQUFTLGVBQVQsRUFBMEIsU0FBQSxHQUFBO0FBQ3hCLFFBQUEsa0JBQUE7QUFBQSxJQUFBLE9BQWlCLEVBQWpCLEVBQUMsaUJBQUQsRUFBVSxhQUFWLENBQUE7QUFBQSxJQUVBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxNQUFBLE9BQUEsR0FDRTtBQUFBLFFBQUEsT0FBQSxFQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBYixDQUFBLENBQXdCLENBQUEsQ0FBQSxDQUFqQztBQUFBLFFBQ0EsSUFBQSxFQUFNLGNBRE47QUFBQSxRQUVBLE9BQUEsRUFBUyxNQUZUO0FBQUEsUUFHQSxFQUFBLEVBQUksR0FISjtBQUFBLFFBSUEsTUFBQSxFQUNFO0FBQUEsVUFBQSxPQUFBLEVBQ0U7QUFBQSxZQUFBLGFBQUEsRUFBZSxJQUFmO1dBREY7U0FMRjtPQURGLENBQUE7QUFBQSxNQVFBLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQiw0QkFBaEIsRUFBOEMsQ0FBOUMsQ0FSQSxDQUFBO2FBU0EsR0FBQSxHQUFVLElBQUEsR0FBQSxDQUFJLE9BQUosRUFWRDtJQUFBLENBQVgsQ0FGQSxDQUFBO0FBQUEsSUFjQSxTQUFBLENBQVUsU0FBQSxHQUFBO2FBQ1IsR0FBRyxDQUFDLE9BQUosQ0FBQSxFQURRO0lBQUEsQ0FBVixDQWRBLENBQUE7QUFBQSxJQWlCQSxRQUFBLENBQVMsWUFBVCxFQUF1QixTQUFBLEdBQUE7QUFFckIsTUFBQSxVQUFBLENBQVcsU0FB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

//# sourceURL=/home/champ/.atom/packages/build-tools/spec/tab-spec.coffee
