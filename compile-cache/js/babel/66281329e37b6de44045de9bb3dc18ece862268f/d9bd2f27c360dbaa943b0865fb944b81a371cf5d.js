'use babel';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var Booleans = ['YES', 'ON', 'TRUE', 'NO', 'OFF', 'FALSE'];

exports.Booleans = Booleans;
var FindProgram = ['NAMES', 'HINTS', 'ENV', 'PATHS', 'PATH_SUFFIXES', 'DOC', 'NO_DEFAULT_PATH', 'NO_CMAKE_ENVIRONMENT_PATH', 'NO_CMAKE_PATH', 'NO_SYSTEM_ENVIRONMENT_PATH', 'NO_CMAKE_SYSTEM_PATH', 'CMAKE_FIND_ROOT_PATH_BOTH', 'ONLY_CMAKE_FIND_ROOT_PATH', 'NO_CMAKE_FIND_ROOT_PATH'];

exports.FindProgram = FindProgram;
var FindModules = [
// Configuration constants
'EXACT', 'QUIET', 'REQUIRED', 'COMPONENTS', 'CONFIG', 'NO_MODULE', 'NO_POLICY_SCOPE', 'NAMES', 'CONFIGS', 'HINTS', 'PATHS', 'PATH_SUFFIXES', 'NO_DEFAULT_PATH', 'NO_CMAKE_ENVIRONMENT_PATH', 'NO_CMAKE_PATH', 'NO_SYSTEM_ENVIRONMENT_PATH', 'NO_CMAKE_PACKAGE_REGISTRY', 'NO_CMAKE_BUILDS_PATH', 'NO_CMAKE_SYSTEM_PATH', 'NO_CMAKE_SYSTEM_PACKAGE_REGISTRY', 'CMAKE_FIND_ROOT_PATH_BOTH', 'ONLY_CMAKE_FIND_ROOT_PATH', 'NO_CMAKE_FIND_ROOT_PATH',
// Module constants
'ALSA', 'ASPELL', 'AVIFile', 'Armadillo', 'BISON', 'BLAS', 'BZip2', 'Backtrace', 'Boost', 'Bullet', 'CABLE', 'CUDA', 'CURL', 'CVS', 'Coin3D', 'Cups', 'Curses', 'CxxTest', 'Cygwin', 'DCMTK', 'Dart', 'DevIL', 'Doxygen', 'EXPAT', 'FLEX', 'FLTK', 'FLTK2', 'Freetype', 'GCCXML', 'GDAL', 'GIF', 'GLEW', 'GLUT', 'GSL', 'GTK', 'GTK2', 'GTest', 'Gettext', 'Git', 'GnuTLS', 'Gnuplot', 'HDF5', 'HSPELL', 'HTMLHelp', 'Hg', 'ITK', 'Ice', 'Icotool', 'ImageMagick', 'Intl', 'JNI', 'JPEG', 'Jasper', 'Java', 'KDE3', 'KDE4', 'LAPACK', 'LATEX', 'LibArchive', 'LibLZMA', 'LibXml2', 'LibXslt', 'Lua', 'Lua50', 'Lua51', 'MFC', 'MPEG', 'MPEG2', 'MPI', 'Matlab', 'Motif', 'OpenAL', 'OpenCL', 'OpenGL', 'OpenMP', 'OpenSSL', 'OpenSceneGraph', 'OpenThreads', 'PHP4', 'PNG', 'PackageHandleStandardArgs', 'PackageMessage', 'Perl', 'PerlLibs', 'PhysFS', 'Pike', 'PkgConfig', 'PostgreSQL', 'Producer', 'Protobuf', 'PythonInterp', 'PythonLibs', 'Qt', 'Qt3', 'Qt4', 'QuickTime', 'RTI', 'Ruby', 'SDL', 'SDL_image', 'SDL_mixer', 'SDL_net', 'SDL_sound', 'SDL_ttf', 'SWIG', 'SelfPackers', 'Squish', 'Subversion', 'TCL', 'TIFF', 'TclStub', 'Tclsh', 'Threads', 'UnixCommands', 'VTK', 'Wget', 'Wish', 'X11', 'XCTest', 'XMLRPC', 'XercesC', 'ZLIB', 'osg', 'osgAnimation', 'osgDB', 'osgFX', 'osgGA', 'osgIntrospection', 'osgManipulator', 'osgParticle', 'osgPresentation', 'osgProducer', 'osgQt', 'osgShadow', 'osgSim', 'osgTerrain', 'osgText', 'osgUtil', 'osgViewer', 'osgVolume', 'osgWidget', 'osg_functions', 'wxWidgets', 'wxWindows'];

exports.FindModules = FindModules;
var FindPath = ['NAMES', 'HINTS', 'ENV', 'PATHS', 'PATH_SUFFIXES', 'DOC', 'NO_DEFAULT_PATH', 'NO_CMAKE_ENVIRONMENT_PATH', 'NO_CMAKE_PATH', 'NO_SYSTEM_ENVIRONMENT_PATH', 'NO_CMAKE_SYSTEM_PATH', 'CMAKE_FIND_ROOT_PATH_BOTH', 'ONLY_CMAKE_FIND_ROOT_PATH', 'NO_CMAKE_FIND_ROOT_PATH'];

exports.FindPath = FindPath;
var Modules = [
// Configuration constants
'OPTIONAL', 'RESULT_VARIABLE', 'NO_POLICY_SCOPE',
// Module constants
'AddFileDependencies', 'BundleUtilities', 'CMakeAddFortranSubdirectory', 'CMakeBackwardCompatibilityCXX', 'CMakeDependentOption', 'CMakeDetermineVSServicePack', 'CMakeExpandImportedTargets', 'CMakeFindDependencyMacro', 'CMakeFindFrameworks', 'CMakeFindPackageMode', 'CMakeForceCompiler', 'CMakeGraphVizOptions', 'CMakePackageConfigHelpers', 'CMakeParseArguments', 'CMakePrintHelpers', 'CMakePrintSystemInformation', 'CMakePushCheckState', 'CMakeVerifyManifest', 'CPack', 'CPackBundle', 'CPackComponent', 'CPackCygwin', 'CPackDMG', 'CPackDeb', 'CPackIFW', 'CPackNSIS', 'CPackPackageMaker', 'CPackRPM', 'CPackWIX', 'CTest', 'CTestCoverageCollectGCOV', 'CTestScriptMode', 'CTestUseLaunchers', 'CheckCCompilerFlag', 'CheckCSourceCompiles', 'CheckCSourceRuns', 'CheckCXXCompilerFlag', 'CheckCXXSourceCompiles', 'CheckCXXSourceRuns', 'CheckCXXSymbolExists', 'CheckFortranCompilerFlag', 'CheckFortranFunctionExists', 'CheckFortranSourceCompiles', 'CheckFunctionExists', 'CheckIncludeFile', 'CheckIncludeFileCXX', 'CheckIncludeFiles', 'CheckLanguage', 'CheckLibraryExists', 'CheckPrototypeDefinition', 'CheckStructHasMember', 'CheckSymbolExists', 'CheckTypeSize', 'CheckVariableExists', 'Dart', 'DeployQt4', 'Documentation', 'ExternalData', 'ExternalProject', 'FeatureSummary', 'FortranCInterface', 'GNUInstallDirs', 'GenerateExportHeader', 'GetPrerequisites', 'InstallRequiredSystemLibraries', 'MacroAddFileDependencies', 'ProcessorCount', 'SelectLibraryConfigurations', 'SquishTestScript', 'TestBigEndian', 'TestCXXAcceptsFlag', 'TestForANSIForScope', 'TestForANSIStreamHeaders', 'TestForSSTREAM', 'TestForSTDNamespace', 'UseEcos', 'UseJava', 'UseJavaClassFilelist', 'UseJavaSymlinks', 'UsePkgConfig', 'UseSWIG', 'Use_wxWindows', 'UsewxWidgets', 'WriteBasicConfigVersionFile', 'WriteCompilerDetectionHeader'];
exports.Modules = Modules;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/champ/.atom/packages/autocomplete-cmake/lib/constants.js
