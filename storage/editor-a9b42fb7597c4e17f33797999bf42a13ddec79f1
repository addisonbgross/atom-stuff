{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":18,"width":1366,"height":750,"maximized":true},"grammars":{"grammarOverridesByPath":{"/home/champ/Git/crows/src/anima/interface/Interface.h":"source.cpp"}},"project":{"deserializer":"Project","paths":["/home/champ/Git/crows"],"buffers":[{"id":"fab72723037ef7c90f86ae53c444d798","text":"#include \"Tree.h\"\n\nTree::Tree( float x, float y, float z, SpriteGenerator *gen, InterfaceGenerator *inter )\n{\n    tree = gen->createSpriteModel( x, y, z, \"tree\" );\n    combatMarker = gen->createSpriteModel(\n                            x,\n                            y + tree->getHeight() / 2,\n                            z, \"combat_marker\" );\n    combatMarker->setScale( 3.0f );\n    combatMarker->setHighlight( true );\n    combatMarker->hide();\n\n    interfaceBridge = inter;\n    spriteGen = gen;\n    numCrows = STARTING_CROWS;\n    numSquirrels = STARTING_SQUIRRELS;\n\n    for ( int i = 0; i < TREE_COIN_LIMIT; ++i ) {\n        addCrowCoin( gen->createSpriteModel( \"crowCoin\" )->hide() );\n        addSquirrelCoin( gen->createSpriteModel( \"squirrelCoin\" )->hide() );\n    }\n}\n\nTree::~Tree() {\n    tree->alive = false;\n\n    for ( auto const coin : crowCoins ) {\n        coin->alive = false;\n    }\n\n    for ( auto const coin : squirrelCoins ) {\n        coin->alive = false;\n    }\n}\n\nvoid Tree::sendCrow( Habitat *origin, Habitat *destination )\n{\n    Garbage *garb = dynamic_cast<Garbage *>( destination );\n    if ( garb && garb->incomingSquirrels > 0) {\n        return;\n    }\n\n    destination->incomingCrows++;\n\n    AdvancedSprite *newCrow = spriteGen->createCrow(\n                                    tree->getPosition()->x,\n                                    tree->getPosition()->y,\n                                    tree->getPosition()->z );\n\n    newCrow->setDestination( destination );\n    PathFinder path;\n    glm::vec3 destPosition = destination->getPosition();\n    destPosition.y += destination->getHitBox().y / 2.0f;\n    newCrow->path = *path.flightPath(origin->getPosition(), destPosition);\n    newCrow->isMoving = true;\n\n    departure( \"crow\" );\n}\n\nvoid Tree::sendSquirrel( Habitat *origin, Habitat *destination )\n{\n    Garbage *garb = dynamic_cast<Garbage *>( destination );\n    if ( garb && garb->incomingCrows > 0) {\n        return;\n    }\n\n    destination->incomingSquirrels++;\n\n    AdvancedSprite *newSquirrel = spriteGen->createSquirrel(\n                                        tree->getPosition()->x,\n                                        tree->getPosition()->y,\n                                        tree->getPosition()->z );\n\n    newSquirrel->setDestination( destination );\n    PathFinder path;\n    glm::vec3 destPosition = destination->getPosition();\n    newSquirrel->path = *path.groundPath(origin->getPosition(), destPosition);\n    newSquirrel->isMoving = true;\n\n    departure( \"squirrel\" );\n}\n\n// data\nvoid Tree::showCoins()\n{\n    showingCoins = true;\n}\n\nvoid Tree::hideCoins()\n{\n    showingCoins = false;\n}\n\nvoid Tree::toggleCoins()\n{\n    if ( showingCoins ) {\n        for ( auto const& crow : crowCoins ) {\n            crow->hide();\n        }\n        for ( auto const& squirrel : squirrelCoins) {\n            squirrel->hide();\n        }\n        showingCoins = false;\n\n    } else {\n        showingCoins = true;\n    }\n}\n\nvoid Tree::updateCoins()\n{\n    for ( int i = 0; i < TREE_COIN_LIMIT; ++i ) {\n        if ( i < numCrows ) {\n            crowCoins.at( i )->show();\n        } else {\n            crowCoins.at( i )->hide();\n        }\n\n        if ( i < numSquirrels ) {\n            squirrelCoins.at( i )->show();\n        } else {\n            squirrelCoins.at( i )->hide();\n        }\n    }\n}\n\n// add\nvoid Tree::addCrowCoin( Sprite *coin )\n{\n    float stackHeight = coin->rep->getHeight() * crowCoins.size();\n\n    // orient coins in two stacks of 5\n    float zDiff = 0;\n    if ( crowCoins.size() >= TREE_COIN_LIMIT / 2 ) {\n        zDiff = coin->rep->getWidth() * 1.1f;\n        stackHeight = (crowCoins.size() - TREE_COIN_LIMIT / 2) * coin->rep->getHeight();\n    }\n\n    coin->setPosition( tree->rep->position.x,\n                       tree->rep->position.y + tree->rep->getHeight() + ( stackHeight * 1.15f ),\n                       tree->rep->position.z - coin->rep->getWidth() * 0.6f - zDiff );\n    coin->setHighlight( 1 );\n    crowCoins.push_back( coin );\n}\n\nvoid Tree::addSquirrelCoin( Sprite *coin )\n{\n    float stackHeight = coin->rep->getHeight() * squirrelCoins.size();\n\n    // orient coins in two stacks of 5\n    float zDiff = 0;\n    if ( squirrelCoins.size() >= TREE_COIN_LIMIT / 2 ) {\n        zDiff = coin->rep->getWidth() * 1.1f;\n        stackHeight = (squirrelCoins.size() - TREE_COIN_LIMIT / 2) * coin->rep->getHeight();\n    }\n\n    coin->setPosition( tree->rep->position.x,\n                       tree->rep->position.y + tree->rep->getHeight() + ( stackHeight * 1.15f ),\n                       tree->rep->position.z + coin->rep->getWidth() * 0.6f + zDiff );\n    coin->setHighlight( 1 );\n    squirrelCoins.push_back( coin );\n}\n\nbool Tree::pushCrow()\n{\n    if ( numCrows + 1 < TREE_COIN_LIMIT ) {\n        ++numCrows;\n        return true;\n    }\n\n    return false;\n}\n\nbool Tree::pushSquirrel()\n{\n    if ( numSquirrels + 1 < TREE_COIN_LIMIT ) {\n        ++numSquirrels;\n        return true;\n    }\n\n    return false;\n}\n\n// remove\nvoid Tree::popCrow()\n{\n    crowCoins.back()->alive = false;\n    crowCoins.pop_back();\n}\n\nvoid Tree::popSquirrel()\n{\n    squirrelCoins.back()->alive = false;\n    squirrelCoins.pop_back();\n}\n\n\nvoid Tree::update( int time )\n{\n    if ( numCrows > 0 && numSquirrels > 0 ) {\n        inCombat = true;\n        showingCoins = true;\n        combatMarker->show();\n\n        float spin = 0.025f;\n        combatMarker->setOrientation( *combatMarker->getOrientation() * glm::angleAxis( spin, glm::vec3(0, 1, 0) ) );\n    } else {\n        if ( inCombat ) {\n            updateCoins();\n            toggleCoins();\n        }\n        inCombat = false;\n        combatMarker->hide();\n    }\n\n    if ( showingCoins ) {\n        updateCoins();\n\n        float spin = 0.05f;\n        glm::quat rotation = glm::angleAxis( spin, glm::vec3(0, 1, 0) );\n\n        for ( auto &coin : crowCoins ) {\n            coin->setOrientation( glm::normalize( *coin->getOrientation() * rotation ) );\n        }\n\n        for ( auto &coin : squirrelCoins ) {\n            coin->setOrientation( glm::normalize( *coin->getOrientation() * glm::inverse( rotation ) ) );\n        }\n    }\n}\n\n\nbool Tree::canFitCrows()\n{\n    if ( numCrows + incomingCrows < TREE_COIN_LIMIT ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nbool Tree::canFitSquirrels()\n{\n    if ( numSquirrels + incomingSquirrels < TREE_COIN_LIMIT ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nglm::vec3 Tree::getHitBox()\n{\n    return glm::vec3(\n        tree->rep->getWidth(),\n        tree->rep->getHeight(),\n        tree->rep->getDepth()\n    );\n}\n\nglm::vec3 Tree::getPosition()\n{\n    return glm::vec3(\n        tree->rep->position.x,\n        tree->rep->position.y,\n        tree->rep->position.z\n    );\n}\n\nvoid Tree::arrival( std::string name )\n{\n    if ( name == \"crow\" ) {\n        ++numCrows;\n        --incomingCrows;\n\n    } else if ( name == \"crow_has_goods\" ) {\n        ++numCrows;\n        --incomingCrows;\n        interfaceBridge->addFood( \"crow\" );\n\n    } else if ( name == \"squirrel\" ) {\n        ++numSquirrels;\n        --incomingSquirrels;\n\n    } else if ( name == \"squirrel_has_goods\" ) {\n        ++numSquirrels;\n        --incomingSquirrels;\n        interfaceBridge->addFood( \"squirrel\" );\n\n    } else {\n        std::cout << \"<Error> Tree.cpp-> arrival() has weird arg : \" << name << std::endl;\n    }\n}\n\nvoid Tree::departure( std::string name )\n{\n    if ( name == \"crow\" && numCrows > 0 ) {\n        --numCrows;\n    } else if ( name == \"squirrel\" && numSquirrels > 0 ) {\n        --numSquirrels;\n    } else {\n        std::cout << \"<Error> Tree.cpp-> departure() has weird arg : \" << name << std::endl;\n    }\n}\n\nvoid Tree::setOrientation(glm::quat rotation)\n{\n    tree->setOrientation( rotation );\n}\n\nstd::string Tree::getName()\n{\n    return \"tree\";\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"86":{"range":{"start":{"row":84,"column":0},"end":{"row":94,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":false,"invalidate":"overlap"},"282":{"range":{"start":{"row":84,"column":0},"end":{"row":94,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":false,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":91,"column":25},"end":{"row":91,"column":25}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2},"8":{"id":"8","maintainHistory":false,"markersById":{},"version":2},"18":{"id":"18","maintainHistory":false,"markersById":{},"version":2},"20":{"id":"20","maintainHistory":false,"markersById":{},"version":2},"21":{"id":"21","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":22,"history":{"version":3,"nextCheckpointId":151,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[83,7],[83,7]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[83,7],[83,7]],"newRange":[[83,7],[84,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[84,0],[84,0]],"newRange":[[84,0],[84,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[84,0],[84,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,0],[84,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,0],[84,0]],"newRange":[[84,0],[84,1]],"oldText":"","newText":"v"}},{"type":"change","content":{"oldRange":[[84,1],[84,1]],"newRange":[[84,1],[84,2]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[84,2],[84,2]],"newRange":[[84,2],[84,3]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[84,3],[84,3]],"newRange":[[84,3],[84,4]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[84,4],[84,4]],"newRange":[[84,4],[84,5]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[84,5],[84,5]],"newRange":[[84,5],[84,6]],"oldText":"","newText":"T"}},{"type":"change","content":{"oldRange":[[84,6],[84,6]],"newRange":[[84,6],[84,7]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[84,7],[84,7]],"newRange":[[84,7],[84,8]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[84,8],[84,8]],"newRange":[[84,8],[84,9]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[84,9],[84,9]],"newRange":[[84,9],[84,10]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[84,10],[84,10]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,10],[84,10]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,10],[84,10]],"newRange":[[84,10],[84,11]],"oldText":"","newText":":"}},{"type":"change","content":{"oldRange":[[84,11],[84,11]],"newRange":[[84,11],[84,12]],"oldText":"","newText":"h"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[84,12],[84,12]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,12],[84,12]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,11],[84,12]],"newRange":[[84,11],[84,11]],"oldText":"h","newText":""}},{"type":"change","content":{"oldRange":[[84,10],[84,11]],"newRange":[[84,10],[84,10]],"oldText":":","newText":""}},{"type":"change","content":{"oldRange":[[84,9],[84,10]],"newRange":[[84,9],[84,9]],"oldText":";","newText":""}},{"type":"change","content":{"oldRange":[[84,9],[84,9]],"newRange":[[84,9],[84,10]],"oldText":"","newText":":"}},{"type":"change","content":{"oldRange":[[84,10],[84,10]],"newRange":[[84,10],[84,11]],"oldText":"","newText":":"}},{"type":"change","content":{"oldRange":[[84,11],[84,11]],"newRange":[[84,11],[84,12]],"oldText":"","newText":"h"}},{"type":"change","content":{"oldRange":[[84,12],[84,12]],"newRange":[[84,12],[84,13]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[84,13],[84,13]],"newRange":[[84,13],[84,14]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[84,14],[84,14]],"newRange":[[84,14],[84,15]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[84,15],[84,15]],"newRange":[[84,15],[84,16]],"oldText":"","newText":"C"}},{"type":"change","content":{"oldRange":[[84,16],[84,16]],"newRange":[[84,16],[84,17]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[84,17],[84,17]],"newRange":[[84,17],[84,18]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[84,18],[84,18]],"newRange":[[84,18],[84,19]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[84,19],[84,19]],"newRange":[[84,19],[84,20]],"oldText":"","newText":"s"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[84,20],[84,20]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,20],[84,20]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,20],[84,20]],"newRange":[[84,20],[84,22]],"oldText":"","newText":"()"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[84,22],[84,22]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,22],[84,22]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,22],[84,22]],"newRange":[[84,22],[85,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[85,0],[85,0]],"newRange":[[85,0],[85,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[85,0],[85,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[85,0],[85,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[85,0],[85,0]],"newRange":[[85,0],[85,2]],"oldText":"","newText":"{}"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[85,2],[85,2]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[85,1],[85,1]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[85,1],[85,1]],"newRange":[[85,1],[87,0]],"oldText":"","newText":"\n\n"}},{"type":"change","content":{"oldRange":[[86,0],[86,0]],"newRange":[[86,0],[86,4]],"oldText":"","newText":"    "}},{"type":"change","content":{"oldRange":[[87,0],[87,0]],"newRange":[[87,0],[87,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,4],[86,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[87,1],[87,1]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[87,1],[87,1]],"newRange":[[87,1],[88,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[88,0],[88,0]],"newRange":[[88,0],[88,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[88,0],[88,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,0],[86,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,4],[86,4]],"newRange":[[86,4],[86,8]],"oldText":"","newText":"    "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,8],[86,8]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,8],[86,8]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,8],[86,8]],"newRange":[[86,8],[86,9]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[86,9],[86,9]],"newRange":[[86,9],[86,10]],"oldText":"","newText":"h"}},{"type":"change","content":{"oldRange":[[86,10],[86,10]],"newRange":[[86,10],[86,11]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[86,11],[86,11]],"newRange":[[86,11],[86,12]],"oldText":"","newText":"w"}},{"type":"change","content":{"oldRange":[[86,12],[86,12]],"newRange":[[86,12],[86,13]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[86,13],[86,13]],"newRange":[[86,13],[86,14]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[86,14],[86,14]],"newRange":[[86,14],[86,15]],"oldText":"","newText":"g"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,15],[86,15]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,15],[86,15]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,14],[86,15]],"newRange":[[86,14],[86,14]],"oldText":"g","newText":""}},{"type":"change","content":{"oldRange":[[86,13],[86,14]],"newRange":[[86,13],[86,13]],"oldText":"n","newText":""}},{"type":"change","content":{"oldRange":[[86,12],[86,13]],"newRange":[[86,12],[86,12]],"oldText":"i","newText":""}},{"type":"change","content":{"oldRange":[[86,11],[86,12]],"newRange":[[86,11],[86,11]],"oldText":"w","newText":""}},{"type":"change","content":{"oldRange":[[86,10],[86,11]],"newRange":[[86,10],[86,10]],"oldText":"o","newText":""}},{"type":"change","content":{"oldRange":[[86,9],[86,10]],"newRange":[[86,9],[86,9]],"oldText":"h","newText":""}},{"type":"change","content":{"oldRange":[[86,8],[86,9]],"newRange":[[86,8],[86,8]],"oldText":"s","newText":""}},{"type":"change","content":{"oldRange":[[86,4],[86,8]],"newRange":[[86,4],[86,4]],"oldText":"    ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,4],[86,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,4],[86,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,4],[86,4]],"newRange":[[86,4],[86,5]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[86,5],[86,5]],"newRange":[[86,5],[86,6]],"oldText":"","newText":"h"}},{"type":"change","content":{"oldRange":[[86,6],[86,6]],"newRange":[[86,6],[86,7]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[86,7],[86,7]],"newRange":[[86,7],[86,8]],"oldText":"","newText":"w"}},{"type":"change","content":{"oldRange":[[86,8],[86,8]],"newRange":[[86,8],[86,9]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[86,9],[86,9]],"newRange":[[86,9],[86,10]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[86,10],[86,10]],"newRange":[[86,10],[86,11]],"oldText":"","newText":"g"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,11],[86,11]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,11],[86,11]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,11],[86,11]],"newRange":[[86,11],[86,12]],"oldText":"","newText":"C"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,12],[86,12]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,12],[86,12]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,12],[86,12]],"newRange":[[86,12],[86,13]],"oldText":"","newText":"o"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,13],[86,13]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,13],[86,13]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,13],[86,13]],"newRange":[[86,13],[86,14]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[86,14],[86,14]],"newRange":[[86,14],[86,15]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[86,15],[86,15]],"newRange":[[86,15],[86,16]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[86,16],[86,16]],"newRange":[[86,16],[86,17]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[86,17],[86,17]],"newRange":[[86,17],[86,18]],"oldText":"","newText":"="}},{"type":"change","content":{"oldRange":[[86,18],[86,18]],"newRange":[[86,18],[86,19]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,19],[86,19]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,19],[86,19]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,19],[86,19]],"newRange":[[86,19],[86,20]],"oldText":"","newText":"f"}},{"type":"change","content":{"oldRange":[[86,20],[86,20]],"newRange":[[86,20],[86,21]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[86,21],[86,21]],"newRange":[[86,21],[86,22]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[86,22],[86,22]],"newRange":[[86,22],[86,23]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[86,23],[86,23]],"newRange":[[86,23],[86,24]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[86,24],[86,24]],"newRange":[[86,24],[86,25]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,25],[86,25]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[83,7],[83,7]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[83,7],[83,7]],"newRange":[[83,7],[84,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[84,0],[84,0]],"newRange":[[84,0],[84,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[84,0],[84,0]],"newRange":[[84,0],[85,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[85,0],[85,0]],"newRange":[[85,0],[85,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[84,0],[84,0]],"newRange":[[84,0],[84,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[85,0],[85,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,0],[84,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,0],[84,0]],"newRange":[[84,0],[84,1]],"oldText":"","newText":"v"}},{"type":"change","content":{"oldRange":[[84,1],[84,1]],"newRange":[[84,1],[84,2]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[84,2],[84,2]],"newRange":[[84,2],[84,3]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[84,3],[84,3]],"newRange":[[84,3],[84,4]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[84,4],[84,4]],"newRange":[[84,4],[84,5]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[84,5],[84,5]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,5],[84,5]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,5],[84,5]],"newRange":[[84,5],[84,6]],"oldText":"","newText":"T"}},{"type":"change","content":{"oldRange":[[84,6],[84,6]],"newRange":[[84,6],[84,7]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[84,7],[84,7]],"newRange":[[84,7],[84,8]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[84,8],[84,8]],"newRange":[[84,8],[84,9]],"oldText":"","newText":"e"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[84,9],[84,9]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,9],[84,9]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,9],[84,9]],"newRange":[[84,9],[84,10]],"oldText":"","newText":":"}},{"type":"change","content":{"oldRange":[[84,10],[84,10]],"newRange":[[84,10],[84,11]],"oldText":"","newText":":"}},{"type":"change","content":{"oldRange":[[84,11],[84,11]],"newRange":[[84,11],[84,12]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[84,12],[84,12]],"newRange":[[84,12],[84,13]],"oldText":"","newText":"h"}},{"type":"change","content":{"oldRange":[[84,13],[84,13]],"newRange":[[84,13],[84,14]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[84,14],[84,14]],"newRange":[[84,14],[84,15]],"oldText":"","newText":"w"}},{"type":"change","content":{"oldRange":[[84,15],[84,15]],"newRange":[[84,15],[84,16]],"oldText":"","newText":"C"}},{"type":"change","content":{"oldRange":[[84,16],[84,16]],"newRange":[[84,16],[84,17]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[84,17],[84,17]],"newRange":[[84,17],[84,18]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[84,18],[84,18]],"newRange":[[84,18],[84,19]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[84,19],[84,19]],"newRange":[[84,19],[84,20]],"oldText":"","newText":"s"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[84,20],[84,20]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,20],[84,20]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,20],[84,20]],"newRange":[[84,20],[84,22]],"oldText":"","newText":"()"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[84,22],[84,22]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,22],[84,22]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[84,22],[84,22]],"newRange":[[84,22],[85,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[85,0],[85,0]],"newRange":[[85,0],[85,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[85,0],[85,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[85,0],[85,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[85,0],[85,0]],"newRange":[[85,0],[85,2]],"oldText":"","newText":"{}"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[85,2],[85,2]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[85,1],[85,1]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[85,1],[85,1]],"newRange":[[85,1],[87,0]],"oldText":"","newText":"\n\n"}},{"type":"change","content":{"oldRange":[[86,0],[86,0]],"newRange":[[86,0],[86,4]],"oldText":"","newText":"    "}},{"type":"change","content":{"oldRange":[[87,0],[87,0]],"newRange":[[87,0],[87,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,4],[86,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,4],[86,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,4],[86,4]],"newRange":[[86,4],[86,5]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[86,5],[86,5]],"newRange":[[86,5],[86,6]],"oldText":"","newText":"h"}},{"type":"change","content":{"oldRange":[[86,6],[86,6]],"newRange":[[86,6],[86,7]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[86,7],[86,7]],"newRange":[[86,7],[86,8]],"oldText":"","newText":"w"}},{"type":"change","content":{"oldRange":[[86,8],[86,8]],"newRange":[[86,8],[86,9]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[86,9],[86,9]],"newRange":[[86,9],[86,10]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[86,10],[86,10]],"newRange":[[86,10],[86,11]],"oldText":"","newText":"g"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,11],[86,11]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,11],[86,11]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,11],[86,11]],"newRange":[[86,11],[86,12]],"oldText":"","newText":"C"}},{"type":"change","content":{"oldRange":[[86,12],[86,12]],"newRange":[[86,12],[86,13]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[86,13],[86,13]],"newRange":[[86,13],[86,14]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[86,14],[86,14]],"newRange":[[86,14],[86,15]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[86,15],[86,15]],"newRange":[[86,15],[86,16]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[86,16],[86,16]],"newRange":[[86,16],[86,17]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,17],[86,17]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[86,17],[86,17]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[86,17],[86,17]],"newRange":[[86,17],[86,18]],"oldText":"","newText":"="}},{"type":"change","content":{"oldRange":[[86,18],[86,18]],"newRange":[[86,18],[86,19]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[86,19],[86,19]],"newRange":[[86,19],[86,20]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[86,20],[86,20]],"newRange":[[86,20],[86,21]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[86,21],[86,21]],"newRange":[[86,21],[86,22]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[86,22],[86,22]],"newRange":[[86,22],[86,23]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[86,23],[86,23]],"newRange":[[86,23],[86,24]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[86,24],[86,24]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[79,0],[79,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[5,0],[13,0]],"newRange":[[5,0],[5,0]],"oldText":"    combatMarker = gen->createSpriteModel(\n                            x,\n                            y + tree->getHeight() / 2,\n                            z, \"combat_marker\" );\n    combatMarker->setScale( 3.0f );\n    combatMarker->setHighlight( true );\n    combatMarker->hide();\n\n","newText":""}},{"type":"change","content":{"oldRange":[[30,0],[35,0]],"newRange":[[30,0],[30,0]],"oldText":"    Garbage *garb = dynamic_cast<Garbage *>( destination );\n    if ( garb && garb->incomingSquirrels > 0) {\n        return;\n    }\n\n","newText":""}},{"type":"change","content":{"oldRange":[[32,0],[32,0]],"newRange":[[32,0],[35,0]],"oldText":"","newText":"    Crow *newCrow = spriteGen->createCrow( tree->getPosition()->x,\n                                           tree->getPosition()->y,\n                                           tree->getPosition()->z );\n"}},{"type":"change","content":{"oldRange":[[35,0],[40,0]],"newRange":[[35,0],[35,0]],"oldText":"    AdvancedSprite *newCrow = spriteGen->createCrow(\n                                    tree->getPosition()->x,\n                                    tree->getPosition()->y,\n                                    tree->getPosition()->z );\n\n","newText":""}},{"type":"change","content":{"oldRange":[[45,0],[68,0]],"newRange":[[45,0],[45,0]],"oldText":"void Tree::sendSquirrel( Habitat *origin, Habitat *destination )\n{\n    Garbage *garb = dynamic_cast<Garbage *>( destination );\n    if ( garb && garb->incomingCrows > 0) {\n        return;\n    }\n\n    destination->incomingSquirrels++;\n\n    AdvancedSprite *newSquirrel = spriteGen->createSquirrel(\n                                        tree->getPosition()->x,\n                                        tree->getPosition()->y,\n                                        tree->getPosition()->z );\n\n    newSquirrel->setDestination( destination );\n    PathFinder path;\n    glm::vec3 destPosition = destination->getPosition();\n    newSquirrel->path = *path.groundPath(origin->getPosition(), destPosition);\n    newSquirrel->isMoving = true;\n\n    departure( \"squirrel\" );\n}\n\n","newText":""}},{"type":"change","content":{"oldRange":[[46,0],[56,0]],"newRange":[[46,0],[46,0]],"oldText":"void Tree::showCoins()\n{\n    showingCoins = true;\n}\n\nvoid Tree::hideCoins()\n{\n    showingCoins = false;\n}\n\n","newText":""}},{"type":"change","content":{"oldRange":[[58,0],[58,0]],"newRange":[[58,0],[59,0]],"oldText":"","newText":"        updateCoins();\n"}},{"type":"change","content":{"oldRange":[[121,0],[121,0]],"newRange":[[121,0],[126,0]],"oldText":"","newText":"\n        if ( showingCoins ) {\n            updateCoins();\n        }\n\n"}},{"type":"change","content":{"oldRange":[[136,0],[136,0]],"newRange":[[136,0],[141,0]],"oldText":"","newText":"\n        if ( showingCoins ) {\n            updateCoins();\n        }\n\n"}},{"type":"change","content":{"oldRange":[[163,0],[179,0]],"newRange":[[163,0],[163,0]],"oldText":"    if ( numCrows > 0 && numSquirrels > 0 ) {\n        inCombat = true;\n        showingCoins = true;\n        combatMarker->show();\n\n        float spin = 0.025f;\n        combatMarker->setOrientation( *combatMarker->getOrientation() * glm::angleAxis( spin, glm::vec3(0, 1, 0) ) );\n    } else {\n        if ( inCombat ) {\n            updateCoins();\n            toggleCoins();\n        }\n        inCombat = false;\n        combatMarker->hide();\n    }\n\n","newText":""}},{"type":"change","content":{"oldRange":[[164,0],[166,0]],"newRange":[[164,0],[164,0]],"oldText":"        updateCoins();\n\n","newText":""}},{"type":"change","content":{"oldRange":[[237,0],[237,0]],"newRange":[[237,0],[241,0]],"oldText":"","newText":"\n    if ( showingCoins ) {\n        updateCoins();\n    }\n"}},{"type":"change","content":{"oldRange":[[252,0],[252,0]],"newRange":[[252,0],[256,0]],"oldText":"","newText":"\n    if ( showingCoins ) {\n        updateCoins();\n    }\n"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[45,0],[45,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[79,0],[79,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[13,0]],"oldText":"","newText":"    combatMarker = gen->createSpriteModel(\n                            x,\n                            y + tree->getHeight() / 2,\n                            z, \"combat_marker\" );\n    combatMarker->setScale( 3.0f );\n    combatMarker->setHighlight( true );\n    combatMarker->hide();\n\n"}},{"type":"change","content":{"oldRange":[[38,0],[38,0]],"newRange":[[38,0],[43,0]],"oldText":"","newText":"    Garbage *garb = dynamic_cast<Garbage *>( destination );\n    if ( garb && garb->incomingSquirrels > 0) {\n        return;\n    }\n\n"}},{"type":"change","content":{"oldRange":[[45,0],[45,0]],"newRange":[[45,0],[50,0]],"oldText":"","newText":"    AdvancedSprite *newCrow = spriteGen->createCrow(\n                                    tree->getPosition()->x,\n                                    tree->getPosition()->y,\n                                    tree->getPosition()->z );\n\n"}},{"type":"change","content":{"oldRange":[[50,0],[53,0]],"newRange":[[50,0],[50,0]],"oldText":"    Crow *newCrow = spriteGen->createCrow( tree->getPosition()->x,\n                                           tree->getPosition()->y,\n                                           tree->getPosition()->z );\n","newText":""}},{"type":"change","content":{"oldRange":[[60,0],[60,0]],"newRange":[[60,0],[83,0]],"oldText":"","newText":"void Tree::sendSquirrel( Habitat *origin, Habitat *destination )\n{\n    Garbage *garb = dynamic_cast<Garbage *>( destination );\n    if ( garb && garb->incomingCrows > 0) {\n        return;\n    }\n\n    destination->incomingSquirrels++;\n\n    AdvancedSprite *newSquirrel = spriteGen->createSquirrel(\n                                        tree->getPosition()->x,\n                                        tree->getPosition()->y,\n                                        tree->getPosition()->z );\n\n    newSquirrel->setDestination( destination );\n    PathFinder path;\n    glm::vec3 destPosition = destination->getPosition();\n    newSquirrel->path = *path.groundPath(origin->getPosition(), destPosition);\n    newSquirrel->isMoving = true;\n\n    departure( \"squirrel\" );\n}\n\n"}},{"type":"change","content":{"oldRange":[[84,0],[84,0]],"newRange":[[84,0],[94,0]],"oldText":"","newText":"void Tree::showCoins()\n{\n    showingCoins = true;\n}\n\nvoid Tree::hideCoins()\n{\n    showingCoins = false;\n}\n\n"}},{"type":"change","content":{"oldRange":[[106,0],[107,0]],"newRange":[[106,0],[106,0]],"oldText":"        updateCoins();\n","newText":""}},{"type":"change","content":{"oldRange":[[168,0],[173,0]],"newRange":[[168,0],[168,0]],"oldText":"\n        if ( showingCoins ) {\n            updateCoins();\n        }\n\n","newText":""}},{"type":"change","content":{"oldRange":[[178,0],[183,0]],"newRange":[[178,0],[178,0]],"oldText":"\n        if ( showingCoins ) {\n            updateCoins();\n        }\n\n","newText":""}},{"type":"change","content":{"oldRange":[[200,0],[200,0]],"newRange":[[200,0],[216,0]],"oldText":"","newText":"    if ( numCrows > 0 && numSquirrels > 0 ) {\n        inCombat = true;\n        showingCoins = true;\n        combatMarker->show();\n\n        float spin = 0.025f;\n        combatMarker->setOrientation( *combatMarker->getOrientation() * glm::angleAxis( spin, glm::vec3(0, 1, 0) ) );\n    } else {\n        if ( inCombat ) {\n            updateCoins();\n            toggleCoins();\n        }\n        inCombat = false;\n        combatMarker->hide();\n    }\n\n"}},{"type":"change","content":{"oldRange":[[217,0],[217,0]],"newRange":[[217,0],[219,0]],"oldText":"","newText":"        updateCoins();\n\n"}},{"type":"change","content":{"oldRange":[[292,0],[296,0]],"newRange":[[292,0],[292,0]],"oldText":"\n    if ( showingCoins ) {\n        updateCoins();\n    }\n","newText":""}},{"type":"change","content":{"oldRange":[[303,0],[307,0]],"newRange":[[303,0],[303,0]],"oldText":"\n    if ( showingCoins ) {\n        updateCoins();\n    }\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[126,0],[126,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/champ/Git/crows/src/habitat/tree/Tree.cpp","digestWhenLastPersisted":"d65f06b24221ab2019330fafd497c509b550280d","preferredLineEnding":null,"nextMarkerId":329,"deserializer":"TextBuffer","version":5},{"id":"0f2b26dc674bda0fa25bb1b2f4f2716a","text":"#include \"CrowGame.h\"\n#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)\n    #include <windows.h>\n#endif\n\ntemplate <typename T> bool isIn(T thing, std::vector<T> * source) {\n    if (std::find(source->begin(), source->end(), thing) != source->end()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nbool doInput(SDL_Event e, int x, int y, glm::vec3 trans, Anima *hover, Manipulator *manipulator) {\n    // inital resources\n    std::vector<std::string> * commands = controller.getInput(e);\n\n    // input\n    GLuint button = e.button.button;\n    const unsigned char  *keystate = SDL_GetKeyboardState(NULL);\n\n    if (isIn<std::string>(\"rotate camera horizontally\", commands)) {\n        if (e.motion.xrel > 0) {\n            cf->getMainCamera()->rotateHorizontal(0.025f);\n        } else if (e.motion.xrel < 0) {\n            cf->getMainCamera()->rotateHorizontal(-0.025f);\n        }\n    }\n\n    if (isIn<std::string>(\"rotate camera vertically\", commands)) {\n        if (e.motion.yrel > 0) {\n            cf->getMainCamera()->rotateVertical(-0.025f);\n        } else if (e.motion.yrel < 0) {\n            cf->getMainCamera()->rotateVertical(0.025f);\n        }\n    }\n\n    if (isIn<std::string>(\"select\", commands)) {\n        // select the currently hovered Anima or Interface\n        manipulator->doSelection( hover );\n        manipulator->findInterface( x, y );\n\n        interfaceGen.hideAllButtons();\n\n        // show buttons relevent to the currently selected Anima\n        Anima *sel = manipulator->getSelected();\n        if ( sel ) {\n            interfaceGen.showButtonSet( sel->getName() );\n        }\n    }\n\n    if (isIn<std::string>(\"action\", commands)) {\n        // currently selected\n        Anima *selected = manipulator->getSelected();\n        if ( selected ) {\n            // possible target selection\n            Anima *foundAnima = manipulator->findAnima(trans.x, trans.y, trans.z);\n            manipulator->doNullClick( trans.x, trans.y, trans.z );\n\n            if ( foundAnima && foundAnima != selected ) {\n                glm::vec3 dest = foundAnima->getPosition();\n                Habitat *selectedHabitat = dynamic_cast<Habitat *>( selected );\n                Habitat *targetHabitat = dynamic_cast<Habitat *>( foundAnima );\n\n                if ( selectedHabitat && targetHabitat ) {\n                    if ( selectedHabitat->getNumCrows() > 0 &&\n                         targetHabitat->canFitCrows() ) {\n                            manipulator->doConfirmClick( dest.x, dest.y, dest.z );\n                            selectedHabitat->sendCrow( selectedHabitat, targetHabitat );\n                    }\n                }\n            }\n        }\n    }\n\n    // hot keys\n    if (isIn<std::string>(\"button one\", commands)) {\n        interfaceGen.activateButton( 0, manipulator->getSelected() );\n    }\n    if (isIn<std::string>(\"button two\", commands)) {\n        interfaceGen.activateButton( 1, manipulator->getSelected() );\n    }\n    if (isIn<std::string>(\"button three\", commands)) {\n        interfaceGen.activateButton( 2, manipulator->getSelected() );\n    }\n    if (isIn<std::string>(\"button four\", commands)) {\n        interfaceGen.activateButton( 3, manipulator->getSelected() );\n    }\n\n    // camera zoom\n    if (isIn<std::string>(\"zoom\", commands)) {\n        if (e.wheel.y < 0) {\n            cf->getMainCamera()->zoomOut();\n        } else if (e.wheel.y > 0) {\n            cf->getMainCamera()->zoomIn();\n        }\n    }\n\n    // draw style\n    if (isIn<std::string>(\"draw light\", commands)) {\n        opulence.setClearColour( 1.0, 1.0, 1.0, 1.0 );\n        glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n\n    } else if (isIn<std::string>(\"draw normal\", commands)) {\n        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);\n\n    } else if (isIn<std::string>(\"draw dark\", commands)) {\n        opulence.setClearColour( 0.0, 0.0, 0.0, 1.0 );\n        glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n    }\n\n    // terraforming\n    if (isIn<std::string>(\"make tree\", commands) && !makeTreeDebounce) {\n        Tree *tree = new Tree(trans.x, trans.y, trans.z, &spriteGen, &interfaceGen);\n        tree->setOrientation(\n            glm::angleAxis(\n                glm::radians(static_cast<float>(rand() % 360)),\n                glm::vec3(0, 1, 0)\n            )\n        );\n        animas.push_back(tree);\n\n        makeTreeDebounce = true;\n    } else if (!isIn<std::string>(\"make tree\", commands) && makeTreeDebounce) {\n        makeTreeDebounce = false;\n    }\n    if (isIn<std::string>(\"make light\", commands) && !makeLightDebounce) {\n        spriteGen.addPointLight( trans.x, trans.y + 0.5f, trans.z, 1 );\n\n        makeLightDebounce = true;\n    } else if (!isIn<std::string>(\"make light\", commands) && makeLightDebounce) {\n        makeLightDebounce = false;\n    }\n    if (isIn<std::string>(\"make garbage\", commands) && !makeGarbageDebounce) {\n        Garbage *garbage = new Garbage( trans.x, trans.y + 0.05f, trans.z, &spriteGen );\n        garbage->setOrientation(\n            glm::angleAxis(\n                glm::radians(static_cast<float>(rand() % 360)),\n                glm::vec3(0, 1, 0)\n            )\n        );\n        animas.push_back( garbage );\n        makeGarbageDebounce = true;\n\n    } else if (!isIn<std::string>(\"make garbage\", commands) && makeGarbageDebounce) {\n        makeGarbageDebounce = false;\n    }\n\n    // memories\n    if (isIn<std::string>(\"save game\", commands)) {\n        LevelMaker lvl( &spriteGen, &interfaceGen );\n        if ( lvl.saveLevel( &scenery, &animas, lf ) ) {\n            std::cout << \"Game Saved!\" << std::endl;\n        } else {\n            std::cout << \"ERROR: saving game command failed!\" << std::endl;\n        }\n    }\n\n    return isIn<std::string>(\"quit\", commands);\n}\n\n#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)\n    int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int) {\n#else\n    int main (int argc, char* argv[]) {\n#endif\n    opulence.start();\n\n    screenWidth = opulence.getScreenWidth();\n    screenHeight = opulence.getScreenHeight();\n\n    // enable text input\n    SDL_StartTextInput();\n\n    RtsCamera *camera;\n    cf->setMainCamera( cf->makeCamera(camera) );\n\n    dayMan = new DayManager( &spriteGen, lf );\n\n    // create Level\n    LevelMaker levelMaker( &spriteGen, &interfaceGen );\n    levelMaker.loadLevel( OsType::osConvert( \"../res/level/testlevel\" ),\n                          &scenery, &animas, lf );\n\n    // anima finder and mouse interaction\n    Manipulator manipulator( &animas, &spriteGen, screenWidth, screenHeight );\n\n    // interface init\n    interfaceGen.createKeyboardButtons( &spriteGen );\n    interfaceGen.createCrowInterface( &spriteGen );\n\n    /*** MAIN LOOP ***/\n    SDL_Event e;\n    bool quit = false;\n    while (!quit) {\n        // mouse position in 3-space\n        glm::vec3 trans = opulence.getClickTranslation(e.button.x, e.button.y);\n\n        // camera constants\n        int x = screenWidth / 2,\n            y = screenHeight / 2,\n            camVelocity = 1;\n        SDL_GetMouseState(&x, &y);\n\n        // Anima currently being hovered (if any)\n        Anima *hover = manipulator.findAnima(trans.x, trans.y, trans.z);\n\n        // event loop\n        while (SDL_PollEvent(&e)) {\n            quit = doInput(e, x, y, trans, hover, &manipulator);\n\n            if (quit) {\n                break;\n            }\n        }\n\n        // squirrel army turn\n        ai.update(&animas);\n\n        // update the stuff and things\n        int time = opulence.getTimeManager()->getTime();\n        manipulator.doHover( hover );\n        cf->getMainCamera()->move(x, y, screenWidth, screenHeight);\n        for (auto &anima : animas) {\n            anima->update( time / 1000.0f );\n        }\n\n        // move the Sprites\n        spriteGen.moveAll();\n        spriteGen.sanitation();\n\n        // day/night cycle\n        float rotation = dayMan->rotateSky();\n        opulence.setClearColour( rotation / 3.5f, rotation / 3.5f, rotation, 1 );\n\n        opulence.render();\n    }\n\n    /*** clean up crowgame resources ***/\n    // Sprites\n    spriteGen.killAll();\n\n    // scene\n    delete dayMan;\n\n    // opulence\n    opulence.shutDown();\n    opulence.getStats();\n    /***********************************/\n\n    return 0;\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"3":{"range":{"start":{"row":181,"column":0},"end":{"row":182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"11":{"range":{"start":{"row":181,"column":0},"end":{"row":182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":181,"column":59},"end":{"row":181,"column":59}},"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"8":{"id":"8","maintainHistory":false,"markersById":{},"version":2},"10":{"id":"10","maintainHistory":false,"markersById":{},"version":2},"11":{"id":"11","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":12,"history":{"version":3,"nextCheckpointId":24,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[181,59],[181,63]],"properties":{"type":"selection","goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[181,59],[181,63]],"newRange":[[181,59],[181,60]],"oldText":"test","newText":"b"}},{"type":"change","content":{"oldRange":[[181,60],[181,60]],"newRange":[[181,60],[181,61]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[181,61],[181,61]],"newRange":[[181,61],[181,62]],"oldText":"","newText":"g"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[181,62],[181,62]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[181,59],[181,62]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[181,59],[181,62]],"newRange":[[181,59],[181,60]],"oldText":"big","newText":"t"}},{"type":"change","content":{"oldRange":[[181,60],[181,60]],"newRange":[[181,60],[181,61]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[181,61],[181,61]],"newRange":[[181,61],[181,62]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[181,62],[181,62]],"newRange":[[181,62],[181,63]],"oldText":"","newText":"t"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[181,63],[181,63]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[181,59],[181,59]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[181,59],[181,59]],"newRange":[[181,59],[181,60]],"oldText":"","newText":"f"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[181,60],[181,60]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[181,27],[181,27]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[4,0]],"newRange":[[1,0],[1,0]],"oldText":"#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)\n    #include <windows.h>\n#endif\n","newText":""}},{"type":"change","content":{"oldRange":[[62,0],[62,0]],"newRange":[[62,0],[65,0]],"oldText":"","newText":"                    if ( selectedHabitat->getNumCrows() > 0 && targetHabitat->canFitCrows() ) {\n                        manipulator->doConfirmClick( dest.x, dest.y, dest.z );\n                        selectedHabitat->sendCrow( selectedHabitat, targetHabitat );\n"}},{"type":"change","content":{"oldRange":[[65,0],[69,0]],"newRange":[[65,0],[65,0]],"oldText":"                    if ( selectedHabitat->getNumCrows() > 0 &&\n                         targetHabitat->canFitCrows() ) {\n                            manipulator->doConfirmClick( dest.x, dest.y, dest.z );\n                            selectedHabitat->sendCrow( selectedHabitat, targetHabitat );\n","newText":""}},{"type":"change","content":{"oldRange":[[88,0],[88,0]],"newRange":[[88,0],[89,0]],"oldText":"","newText":"            cf->getMainCamera()->decrementZoom();\n"}},{"type":"change","content":{"oldRange":[[89,0],[90,0]],"newRange":[[89,0],[89,0]],"oldText":"            cf->getMainCamera()->zoomOut();\n","newText":""}},{"type":"change","content":{"oldRange":[[90,0],[90,0]],"newRange":[[90,0],[91,0]],"oldText":"","newText":"            cf->getMainCamera()->incrementZoom();\n"}},{"type":"change","content":{"oldRange":[[91,0],[92,0]],"newRange":[[91,0],[91,0]],"oldText":"            cf->getMainCamera()->zoomIn();\n","newText":""}},{"type":"change","content":{"oldRange":[[123,0],[123,0]],"newRange":[[123,0],[124,0]],"oldText":"","newText":"        spriteGen.addPointLight( trans.x, trans.y, trans.z, 1 );\n"}},{"type":"change","content":{"oldRange":[[124,0],[125,0]],"newRange":[[124,0],[124,0]],"oldText":"        spriteGen.addPointLight( trans.x, trans.y + 0.5f, trans.z, 1 );\n","newText":""}},{"type":"change","content":{"oldRange":[[138,0],[138,0]],"newRange":[[138,0],[139,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[140,0],[141,0]],"newRange":[[140,0],[140,0]],"oldText":"\n","newText":""}},{"type":"change","content":{"oldRange":[[157,0],[157,0]],"newRange":[[157,0],[158,0]],"oldText":"","newText":"int main (int argc, char* argv[]) {\n"}},{"type":"change","content":{"oldRange":[[158,0],[163,0]],"newRange":[[158,0],[158,0]],"oldText":"#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)\n    int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int) {\n#else\n    int main (int argc, char* argv[]) {\n#endif\n","newText":""}},{"type":"change","content":{"oldRange":[[173,0],[173,0]],"newRange":[[173,0],[174,0]],"oldText":"","newText":"    levelMaker.loadLevel( OsType::osConvert( \"../res/level/testlevel\" ),\n"}},{"type":"change","content":{"oldRange":[[174,0],[175,0]],"newRange":[[174,0],[174,0]],"oldText":"    levelMaker.loadLevel( OsType::osConvert( \"../res/level/ftestlevel\" ),\n","newText":""}},{"type":"change","content":{"oldRange":[[208,0],[211,0]],"newRange":[[208,0],[208,0]],"oldText":"        // squirrel army turn\n        ai.update(&animas);\n\n","newText":""}},{"type":"change","content":{"oldRange":[[221,0],[221,0]],"newRange":[[221,0],[222,0]],"oldText":"","newText":"        opulence.setClearColour( 0, 0, dayMan->rotateSky( -0.002 ), 1 );\n"}},{"type":"change","content":{"oldRange":[[222,0],[224,0]],"newRange":[[222,0],[222,0]],"oldText":"        float rotation = dayMan->rotateSky();\n        opulence.setClearColour( rotation / 3.5f, rotation / 3.5f, rotation, 1 );\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[174,0],[174,0]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[181,27],[181,27]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[4,0]],"oldText":"","newText":"#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)\n    #include <windows.h>\n#endif\n"}},{"type":"change","content":{"oldRange":[[65,0],[65,0]],"newRange":[[65,0],[69,0]],"oldText":"","newText":"                    if ( selectedHabitat->getNumCrows() > 0 &&\n                         targetHabitat->canFitCrows() ) {\n                            manipulator->doConfirmClick( dest.x, dest.y, dest.z );\n                            selectedHabitat->sendCrow( selectedHabitat, targetHabitat );\n"}},{"type":"change","content":{"oldRange":[[69,0],[72,0]],"newRange":[[69,0],[69,0]],"oldText":"                    if ( selectedHabitat->getNumCrows() > 0 && targetHabitat->canFitCrows() ) {\n                        manipulator->doConfirmClick( dest.x, dest.y, dest.z );\n                        selectedHabitat->sendCrow( selectedHabitat, targetHabitat );\n","newText":""}},{"type":"change","content":{"oldRange":[[92,0],[92,0]],"newRange":[[92,0],[93,0]],"oldText":"","newText":"            cf->getMainCamera()->zoomOut();\n"}},{"type":"change","content":{"oldRange":[[93,0],[94,0]],"newRange":[[93,0],[93,0]],"oldText":"            cf->getMainCamera()->decrementZoom();\n","newText":""}},{"type":"change","content":{"oldRange":[[94,0],[94,0]],"newRange":[[94,0],[95,0]],"oldText":"","newText":"            cf->getMainCamera()->zoomIn();\n"}},{"type":"change","content":{"oldRange":[[95,0],[96,0]],"newRange":[[95,0],[95,0]],"oldText":"            cf->getMainCamera()->incrementZoom();\n","newText":""}},{"type":"change","content":{"oldRange":[[127,0],[127,0]],"newRange":[[127,0],[128,0]],"oldText":"","newText":"        spriteGen.addPointLight( trans.x, trans.y + 0.5f, trans.z, 1 );\n"}},{"type":"change","content":{"oldRange":[[128,0],[129,0]],"newRange":[[128,0],[128,0]],"oldText":"        spriteGen.addPointLight( trans.x, trans.y, trans.z, 1 );\n","newText":""}},{"type":"change","content":{"oldRange":[[142,0],[142,0]],"newRange":[[142,0],[143,0]],"oldText":"","newText":"        makeGarbageDebounce = true;\n"}},{"type":"change","content":{"oldRange":[[144,0],[145,0]],"newRange":[[144,0],[144,0]],"oldText":"        makeGarbageDebounce = true;\n","newText":""}},{"type":"change","content":{"oldRange":[[161,0],[161,0]],"newRange":[[161,0],[166,0]],"oldText":"","newText":"#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)\n    int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int) {\n#else\n    int main (int argc, char* argv[]) {\n#endif\n"}},{"type":"change","content":{"oldRange":[[166,0],[167,0]],"newRange":[[166,0],[166,0]],"oldText":"int main (int argc, char* argv[]) {\n","newText":""}},{"type":"change","content":{"oldRange":[[181,0],[181,0]],"newRange":[[181,0],[182,0]],"oldText":"","newText":"    levelMaker.loadLevel( OsType::osConvert( \"../res/level/ftestlevel\" ),\n"}},{"type":"change","content":{"oldRange":[[182,0],[183,0]],"newRange":[[182,0],[182,0]],"oldText":"    levelMaker.loadLevel( OsType::osConvert( \"../res/level/testlevel\" ),\n","newText":""}},{"type":"change","content":{"oldRange":[[216,0],[216,0]],"newRange":[[216,0],[219,0]],"oldText":"","newText":"        // squirrel army turn\n        ai.update(&animas);\n\n"}},{"type":"change","content":{"oldRange":[[232,0],[232,0]],"newRange":[[232,0],[234,0]],"oldText":"","newText":"        float rotation = dayMan->rotateSky();\n        opulence.setClearColour( rotation / 3.5f, rotation / 3.5f, rotation, 1 );\n"}},{"type":"change","content":{"oldRange":[[234,0],[235,0]],"newRange":[[234,0],[234,0]],"oldText":"        opulence.setClearColour( 0, 0, dayMan->rotateSky( -0.002 ), 1 );\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[189,27],[189,27]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[181,60],[181,60]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[181,59],[181,60]],"newRange":[[181,59],[181,59]],"oldText":"f","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[181,59],[181,59]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/champ/Git/crows/main.cpp","digestWhenLastPersisted":"1a0ea260b1b714d6af832b8b006da9d7683a4ad1","preferredLineEnding":null,"nextMarkerId":12,"deserializer":"TextBuffer","version":5},{"id":"530cb307c51bcc59f0f87726c0cfcb2b","text":"#include \"Ai.h\"\n\nAi::Ai(InterfaceGenerator *interfaceGen)\n{\n    this->interfaceGen = interfaceGen;\n    currentDifficulty = UNFAIR;\n    currentState = INITIALIZING;\n}\n\nAi::~Ai() {}\n\n// public\nvoid Ai::update(std::vector<Anima *> *animas)\n{\n    // delay Ai actions based on set difficulty\n    if (delayCounter < currentDifficulty) {\n        delayCounter++;\n        return;\n    } else {\n        delayCounter = 0;\n    }\n\n    // perform action\n    switch (currentState) {\n        case IDLE:\n\n            break;\n\n        case INITIALIZING:\n            if (!occupyEmptyTree(animas)) {\n                // if no more trees can be occupied\n                currentState = EXPANDING;\n            }\n            break;\n\n        case EXPANDING:\n            if (occupyResource(animas)) {\n                // a resource will be successfully occupied\n                currentState = CONSOLIDATING;\n            } else {\n                // no garbage to collect, time to expand\n                occupyEmptyTree(animas);\n            }\n            break;\n\n        case CONSOLIDATING:\n            occupyResource(animas);\n            break;\n\n        default:\n            break;\n    };\n\n    // return any squirrels that have gathered resources\n    harvestResources();\n\n    // utilize squirrel food\n    reproduce();\n}\n\n// private\nbool Ai::occupyEmptyTree(std::vector<Anima *> *animas)\n{\n    if (interfaceGen->getSquirrelFood() > 0) {\n        for (auto anima : *animas) {\n            Tree *tree = dynamic_cast<Tree *>(anima);\n            if (tree && tree->getNumSquirrels() == 0) {\n                interfaceGen->spawnSquirrel(tree);\n                occupiedTrees.push_back(tree);\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nbool Ai::occupyResource(std::vector<Anima *> *animas)\n{\n    if (interfaceGen->getSquirrelPopulation() > 0) {\n        Garbage *garbage = dynamic_cast<Garbage *>(\n                                animas->at(rand() % animas->size())\n                           );\n        if (garbage) {\n            // send unit from random occupied tree\n            if (occupiedTrees.size() > 0) {\n                Tree *tree = occupiedTrees.at(rand() % occupiedTrees.size());\n                if (tree &&\n                    tree->getNumSquirrels() > 0 &&\n                    garbage->canFitSquirrels() &&\n                    garbage->getIncomingCrows() == 0) {\n                        tree->sendSquirrel(tree, garbage);\n                        occupiedGarbages.push_back(garbage);\n                }\n            }\n\n            return true;\n        }\n    }\n\n    return false;\n}\n\nvoid Ai::harvestResources()\n{\n    for (auto garbage : occupiedGarbages) {\n        if (garbage->readyForPickup() && garbage->getNumSquirrels() > 0) {\n            int randTree = rand() % occupiedTrees.size();\n            Tree * tree = occupiedTrees.at(randTree);\n            if (tree && tree->canFitSquirrels()) {\n                garbage->sendSquirrel(garbage, tree);\n\n                // remove garbage from occupied garbages\n                for(std::vector<Garbage *>::iterator i = occupiedGarbages.begin();\n                    i != occupiedGarbages.end();\n                    ++i) {\n                        if(*i == garbage) {\n                            occupiedGarbages.erase(i);\n                            break;\n                        }\n                }\n                return;\n            }\n        }\n    }\n}\n\nvoid Ai::reproduce()\n{\n    if (interfaceGen->getSquirrelFood() > 0) {\n        if (occupiedTrees.size() > 0) {\n            Tree *tree = occupiedTrees.at(rand() % occupiedTrees.size());\n            if (tree &&\n                tree->canFitSquirrels() &&\n                interfaceGen->getSquirrelPopulation() + 1 <=\n                occupiedTrees.size() * tree->TREE_COIN_LIMIT ) {\n                    interfaceGen->spawnSquirrel(tree);\n            }\n        }\n    }\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"98":{"range":{"start":{"row":39,"column":19},"end":{"row":42,"column":12}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"153":{"range":{"start":{"row":39,"column":0},"end":{"row":42,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":43,"column":18},"end":{"row":43,"column":18}},"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":92,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[38,45],[38,45]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[38,16],[38,16]],"newRange":[[38,16],[38,19]],"oldText":"","newText":"// "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[38,48],[38,48]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[38,48],[38,48]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[38,48],[38,48]],"newRange":[[38,48],[39,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[39,0],[39,0]],"newRange":[[39,0],[39,16]],"oldText":"","newText":"                "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[39,16],[39,16]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[39,16],[39,16]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[39,16],[39,16]],"newRange":[[39,16],[39,39]],"oldText":"","newText":"occupyEmptyTree(animas)"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[39,39],[39,39]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[39,39],[39,39]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[39,39],[39,39]],"newRange":[[39,39],[39,40]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[39,40],[39,40]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[39,32],[39,32]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[39,16],[39,16]],"newRange":[[39,16],[39,19]],"oldText":"","newText":"// "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[39,35],[39,35]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[38,35],[38,35]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[38,16],[38,19]],"newRange":[[38,16],[38,16]],"oldText":"// ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[38,32],[38,32]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,13],[40,13]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,13],[40,13]],"newRange":[[40,13],[40,14]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,14],[40,14]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,14],[40,14]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,14],[40,14]],"newRange":[[40,14],[40,15]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[40,15],[40,15]],"newRange":[[40,15],[40,16]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[40,16],[40,16]],"newRange":[[40,16],[40,17]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[40,17],[40,17]],"newRange":[[40,17],[40,18]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[40,18],[40,18]],"newRange":[[40,18],[40,19]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,19],[40,19]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,19],[40,19]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,19],[40,19]],"newRange":[[40,19],[40,21]],"oldText":"","newText":"{}"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,21],[40,21]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,20],[40,20]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,20],[40,20]],"newRange":[[40,20],[42,0]],"oldText":"","newText":"\n\n"}},{"type":"change","content":{"oldRange":[[41,0],[41,0]],"newRange":[[41,0],[41,16]],"oldText":"","newText":"                "}},{"type":"change","content":{"oldRange":[[42,0],[42,0]],"newRange":[[42,0],[42,12]],"oldText":"","newText":"            "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[41,16],[41,16]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[39,16],[39,16]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[39,16],[39,19]],"newRange":[[39,16],[39,16]],"oldText":"// ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[39,16],[39,16]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[39,16],[39,16]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[39,0],[40,0]],"newRange":[[39,0],[39,0]],"oldText":"                occupyEmptyTree(animas);\n","newText":""}},{"type":"change","content":{"oldRange":[[40,0],[40,0]],"newRange":[[40,0],[41,0]],"oldText":"","newText":"                occupyEmptyTree(animas);\n"}},{"type":"change","content":{"oldRange":[[40,0],[40,16]],"newRange":[[40,0],[40,16]],"oldText":"                ","newText":"                "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,16],[40,16]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,16],[40,16]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,0],[41,0]],"newRange":[[40,0],[40,0]],"oldText":"                occupyEmptyTree(animas);\n","newText":""}},{"type":"change","content":{"oldRange":[[41,0],[41,0]],"newRange":[[41,0],[42,0]],"oldText":"","newText":"                occupyEmptyTree(animas);\n"}},{"type":"change","content":{"oldRange":[[41,0],[41,16]],"newRange":[[41,0],[41,16]],"oldText":"                ","newText":"                "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[41,16],[41,16]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,16],[40,16]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,12],[40,16]],"newRange":[[40,12],[40,12]],"oldText":"    ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,12],[40,12]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,12],[40,12]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,8],[40,12]],"newRange":[[40,8],[40,8]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[40,4],[40,8]],"newRange":[[40,4],[40,4]],"oldText":"    ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,4],[40,4]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,4],[40,4]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,0],[40,4]],"newRange":[[40,0],[40,0]],"oldText":"    ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,0],[40,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,0],[40,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[39,20],[40,0]],"newRange":[[39,20],[39,20]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[39,20],[39,20]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[39,20],[39,20]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[39,20],[39,20]],"newRange":[[39,20],[40,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[40,0],[40,0]],"newRange":[[40,0],[40,16]],"oldText":"","newText":"                "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,16],[40,16]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,16],[40,16]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,16],[40,16]],"newRange":[[40,16],[40,17]],"oldText":"","newText":"/"}},{"type":"change","content":{"oldRange":[[40,17],[40,17]],"newRange":[[40,17],[40,18]],"oldText":"","newText":"/"}},{"type":"change","content":{"oldRange":[[40,18],[40,18]],"newRange":[[40,18],[40,19]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[40,19],[40,19]],"newRange":[[40,19],[40,20]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[40,20],[40,20]],"newRange":[[40,20],[40,21]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[40,21],[40,21]],"newRange":[[40,21],[40,22]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[40,22],[40,22]],"newRange":[[40,22],[40,23]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[40,23],[40,23]],"newRange":[[40,23],[40,24]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[40,24],[40,24]],"newRange":[[40,24],[40,25]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[40,25],[40,25]],"newRange":[[40,25],[40,26]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[40,26],[40,26]],"newRange":[[40,26],[40,27]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[40,27],[40,27]],"newRange":[[40,27],[40,28]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[40,28],[40,28]],"newRange":[[40,28],[40,29]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[40,29],[40,29]],"newRange":[[40,29],[40,30]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[40,30],[40,30]],"newRange":[[40,30],[40,31]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[40,31],[40,31]],"newRange":[[40,31],[40,32]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[40,32],[40,32]],"newRange":[[40,32],[40,33]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[40,33],[40,33]],"newRange":[[40,33],[40,34]],"oldText":"","newText":"c"}},{"type":"change","content":{"oldRange":[[40,34],[40,34]],"newRange":[[40,34],[40,35]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[40,35],[40,35]],"newRange":[[40,35],[40,36]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[40,36],[40,36]],"newRange":[[40,36],[40,37]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[40,37],[40,37]],"newRange":[[40,37],[40,38]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[40,38],[40,38]],"newRange":[[40,38],[40,39]],"oldText":"","newText":"c"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,39],[40,39]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,39],[40,39]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,39],[40,39]],"newRange":[[40,39],[40,40]],"oldText":"","newText":"t"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,40],[40,40]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,40],[40,40]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,40],[40,40]],"newRange":[[40,40],[40,41]],"oldText":"","newText":","}},{"type":"change","content":{"oldRange":[[40,41],[40,41]],"newRange":[[40,41],[40,42]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[40,42],[40,42]],"newRange":[[40,42],[40,43]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[40,43],[40,43]],"newRange":[[40,43],[40,44]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[40,44],[40,44]],"newRange":[[40,44],[40,45]],"oldText":"","newText":"m"}},{"type":"change","content":{"oldRange":[[40,45],[40,45]],"newRange":[[40,45],[40,46]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[40,46],[40,46]],"newRange":[[40,46],[40,47]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[40,47],[40,47]],"newRange":[[40,47],[40,48]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[40,48],[40,48]],"newRange":[[40,48],[40,49]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[40,49],[40,49]],"newRange":[[40,49],[40,50]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,50],[40,50]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[40,50],[40,50]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,50],[40,50]],"newRange":[[40,50],[40,51]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[40,51],[40,51]],"newRange":[[40,51],[40,52]],"oldText":"","newText":"x"}},{"type":"change","content":{"oldRange":[[40,52],[40,52]],"newRange":[[40,52],[40,53]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[40,53],[40,53]],"newRange":[[40,53],[40,54]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[40,54],[40,54]],"newRange":[[40,54],[40,55]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[40,55],[40,55]],"newRange":[[40,55],[40,56]],"oldText":"","newText":"d"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[40,56],[40,56]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/champ/Git/crows/src/ai/Ai.cpp","digestWhenLastPersisted":"d0a3f74266181618a53102611df71eb68c9c1e6d","preferredLineEnding":null,"nextMarkerId":176,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"PaneAxis","children":[{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":5340,"softTabs":true,"firstVisibleScreenRow":83,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5341,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/champ/Git/crows/src/habitat/tree/Tree.cpp","bufferId":"fab72723037ef7c90f86ae53c444d798","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":5526,"softTabs":true,"firstVisibleScreenRow":31,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5527,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/champ/Git/crows/src/ai/Ai.cpp","bufferId":"530cb307c51bcc59f0f87726c0cfcb2b","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/home/champ/Git/crows/src/ai/Ai.cpp","focused":true,"flexScale":1},{"deserializer":"Pane","id":3643,"items":[{"deserializer":"TextEditor","id":5412,"softTabs":true,"firstVisibleScreenRow":166,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5413,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/champ/Git/crows/main.cpp","bufferId":"0f2b26dc674bda0fa25bb1b2f4f2716a","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/home/champ/Git/crows/main.cpp","focused":false,"flexScale":1}],"orientation":"horizontal","flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-c","language-hyperlink","language-todo"],"destroyedItemURIs":["/home/champ/Git/crows/opulence/src/factory/LightFactory.cpp","/home/champ/Git/crows/opulence/src/factory/LightFactory.h","/home/champ/Git/crows/src/anima/interface/population/Population.cpp","/home/champ/Git/crows/src/anima/interface/population/CrowPopulation.h","/home/champ/Git/crows/src/anima/interface/population/FoodPopulation.h","/home/champ/Git/crows/src/anima/interface/population/SquirrelPopulation.h","/home/champ/Git/crows/src/anima/interface/button/Button.h","/home/champ/Git/crows/opulence/windows_toolchain.cmake","/home/champ/Git/crows/src/anima/interface/population/Population.h","/home/champ/Git/crows/src/anima/interface/Interface.h","/home/champ/Git/crows/src/anima/interface/button/Button.cpp","/home/champ/Git/crows/opulence/src/entity/Entity.h","/home/champ/Git/crows/opulence/src/entity/camera/Camera.cpp","/home/champ/Git/crows/src/utility/LevelObject.h","/home/champ/Git/crows/src/anima/Anima.h","atom://config/install","/home/champ/Git/crows/CrowGame.h","/home/champ/Git/crows/src/utility/LevelMaker.h","/home/champ/Git/crows/opulence/src/entity/camera/Camera.h","/usr/local/include/glm/detail/_fixes.hpp","/home/champ/Git/crows/.clang_complete","/home/champ/Git/crows/CMakeLists.txt","/home/champ/Git/crows/.gitignore","/home/champ/Git/crows/src/controller/standardcontroller/StandardController.h","/home/champ/Git/crows/src/controller/Controller.h","/home/champ/Git/crows/opulence/src/service/GLManager.h","/home/champ/Git/crows/opulence/src/service/GLManager.h","/home/champ/Git/crows/src/anima/interface/character/Character.h","atom://todo-show/todos","atom://config/updates","atom://incompatible-packages","/home/champ/Git/crows/.build-tools.cson","/home/champ/Git/crows/src/anima/interface/character/CharacterSet.cpp","/home/champ/Git/crows/src/anima/interface/character/CharacterSet.h","/home/champ/Git/crows/src/anima/interface/character/population/Population.h","/home/champ/Git/crows/src/controller/controlset/PlayerSet.h","/home/champ/Git/crows/src/controller/controlset/ControlSet.h","/home/champ/Git/crows/src/controller/standardcontroller/StandardController.cpp","/home/champ/Git/crows/src/generator/InterfaceGenerator.h","/home/champ/Git/crows/src/service/PathFinder.h","/home/champ/Git/crows/line-count.txt","/home/champ/Git/crows/src/service/PathFinder.cpp","/home/champ/Git/crows/src/utility/DayManager.h","/home/champ/Git/crows/opulence/src/entity/light/DirectionalLight.cpp","/home/champ/Git/crows/opulence/src/entity/light/DirectionalLight.h","/home/champ/Git/crows/opulence/src/entity/light/PointLight.cpp","/home/champ/Git/crows/opulence/src/entity/light/Light.cpp","/home/champ/Git/crows/opulence/src/entity/light/Light.h","/home/champ/Git/crows/opulence/shaders/phongAttenuation.vert","/home/champ/Git/crows/src/generator/InterfaceGenerator.h","/home/champ/Git/crows/src/sprite/Sprite.h","/home/champ/Git/crows/src/generator/InterfaceGenerator.cpp","/home/champ/Git/crows/src/sprite/Sprite.h","/home/champ/Git/crows/src/sprite/crow/Crow.cpp","/home/champ/Git/crows/src/sprite/Sprite.cpp","/home/champ/Git/crows/src/sprite/crow/Crow.h","/home/champ/Git/crows/src/sprite/crow/Crow.cpp","/home/champ/Git/crows/src/sprite/squirrel/Squirrel.h","/home/champ/Git/crows/src/sprite/squirrel/Squirrel.cpp","/home/champ/Git/crows/src/generator/SpriteGenerator.h","/home/champ/Git/crows/opulence/shaders/phongAttenuation.frag","/home/champ/Git/crows/.git/COMMIT_EDITMSG","/home/champ/Git/crows/src/habitat/Habitat.h","/home/champ/Git/crows/src/habitat/garbage/Garbage.cpp","/home/champ/Git/crows/src/sprite/AdvancedSprite.cpp","/home/champ/Git/crows/src/generator/SpriteGenerator.cpp","/home/champ/Git/crows/src/habitat/tree/Tree.cpp","/home/champ/Git/crows/src/utility/DayManager.cpp","/home/champ/Git/crows/src/sprite/AdvancedSprite.cpp","/home/champ/Git/crows/src/habitat/tree/Tree.h","/home/champ/Git/crows/src/sprite/AdvancedSprite.h","/home/champ/Git/crows/src/habitat/garbage/Garbage.h","/home/champ/Git/crows/src/service/Manipulator.cpp","/home/champ/Git/crows/src/ai/Ai.h","/home/champ/.atom/keymap.cson","atom://find-and-replace/project-results","atom://config","/home/champ/Git/crows/opulence/src/entity/camera/RtsCamera.cpp","/home/champ/Git/crows/opulence/src/entity/camera/RtsCamera.h","/home/champ/Git/crows/res/level/biglevel.crow","/home/champ/Git/crows/opulence/src/service/GLManager.cpp","/home/champ/Git/crows/opulence/CMakeLists.txt","/home/champ/Git/crows/opulence/opulence.cpp","/home/champ/Git/crows/src/utility/LevelMaker.cpp","/home/champ/Git/crows/src/habitat/garbage/Garbage.cpp","/home/champ/Git/crows/opulence/src/service/BufferCourier.cpp","/home/champ/Git/crows/res/level/testlevel.crow","/home/champ/Git/crows/src/ai/AiState.h"]},"packageStates":{"fuzzy-finder":{"/home/champ/Git/crows/src/habitat/tree/Tree.cpp":1461711487924,"/home/champ/Git/crows/src/ai/Ai.cpp":1461711904884,"/home/champ/Git/crows/main.cpp":1461711893711},"metrics":{"sessionLength":423299854},"tabs":[{},{}],"tree-view":{"directoryExpansionStates":{"/home/champ/Git/crows":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},".idea":{"isExpanded":false,"entries":{}},"node_modules":{"isExpanded":false,"entries":{}},"opulence":{"isExpanded":false,"entries":{}},"res":{"isExpanded":false,"entries":{}},"src":{"isExpanded":true,"entries":{"anima":{"isExpanded":true,"entries":{"interface":{"isExpanded":false,"entries":{}}}},"controller":{"isExpanded":true,"entries":{"controlset":{"isExpanded":true,"entries":{}},"standardcontroller":{"isExpanded":true,"entries":{}}}},"generator":{"isExpanded":true,"entries":{}},"habitat":{"isExpanded":true,"entries":{"garbage":{"isExpanded":true,"entries":{}},"tree":{"isExpanded":true,"entries":{}}}},"service":{"isExpanded":true,"entries":{}},"sprite":{"isExpanded":true,"entries":{}},"utility":{"isExpanded":true,"entries":{}},"ai":{"isExpanded":true,"entries":{}}}}}}},"selectedPath":"/home/champ/Git/crows/src/ai/Ai.cpp","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":212},"keybinding-resolver":{},"find-and-replace":{"findOptions":{"findPattern":"occupyEmp","replacePattern":"zoomSpeed","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["rand","occupyRandomTree","getCr","increase","Q","sendSqu","sendCr","error","has_goods","getNum","get","getNumSqu","error","canFit","marker","getNum","light","inComb","arrival","inCombat","hover","vao","zoomInSpeed","zoomOutSpeed","occupyEmp"],"replaceHistory":["Manipulatr","Manipulator","manipulator","manipulator->","manipulator.","manipulator->","controller.","manipulator.","TREE_COIN_LIMIT","doNullClick","occupyEmptyTree","zoomSpeed"],"pathsHistory":["Manipulatr","Manipulator","manipulator","manipulator->","manipulator.","manipulator->","controller.","manipulator.","TREE_COIN_LIMIT","doNullClick","src"]},"php-debug":{"deserializer":"GlobalContext","data":{"breakpoints":[],"watchpoints":[]}},"atom-cscope":{},"linter":{"scope":"Project"},"cpp-refactor":{}},"fullScreen":false}